<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>周璇的个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/"/>
  <updated>2018-05-26T01:28:56.915Z</updated>
  <id>https://github.com/</id>
  
  <author>
    <name>zhou xuan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HTML里的数据存储分析</title>
    <link href="https://github.com/2018/05/25/%E6%B5%85%E6%9E%90HTML%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/"/>
    <id>https://github.com/2018/05/25/浅析HTML数据存储/</id>
    <published>2018-05-25T05:53:52.000Z</published>
    <updated>2018-05-26T01:28:56.915Z</updated>
    
    <content type="html"><![CDATA[<style type="text/css">.markdown-body h1,.markdown-body h2,.markdown-body h3,.markdown-body h4,.markdown-body h5,.markdown-body h6{text-indent: 2em;color:#4f4f4f;line-height: 1.5em;}.markdown-body p{text-indent: 2em;font-size: 1.65rem;color:#666666;line-height: 1.5em;}</style><h4>在前端开发工作中，常用的数据存储有三种，分别是cookie，localStorage和sessionStorage。其中，cookie是存储在浏览器的一段文本，而localStorage和sessionStorage则是HTML5中所提供的本地存储。</h4><h4>那么，这几种数据存储方式之间有什么区别呢？让我们来了解一下。</h4><h4>1.cookie</h4><p>cookie是什么?cookie就是一段文本，它存储在客户端（通常来说是浏览器），目前为各大主流浏览器存储数据所用。一般来说用其存储的数据有比如：名字、密码、日期...等信息。cookie存储的数据能在客户端上保留相当长的时间。</p><p><b>分析：</b>用cookie存储的数据有大小限制，一般不可超过4096 个字节，而且cookie的安全系数不高，有被篡改的风险。不过其好处是几乎支持所有浏览器。</p><h4>2.localStorage</h4><p>localStorage 和 sessionStorage 是HTML5 提供的两种在客户端存储数据的新方法，它们能够存储的数据限制要大的多(至少5M)，可以在不影响网站性能的前提下将大量数据存储于本地。其中 localStorage 存储的数据没有时间限制。第二天、第二周或下一年之后，数据依然可用。</p><p><b>分析：</b>用cookie存储的数据有大小限制，一般不可超过4096 个字节，而且cookie的安全系数不高，有被篡改的风险。不过其好处是几乎支持所有浏览器。</p><h4>3.sessionStorage</h4><p>sessionStorage 是针对一个 session (会话) 进行数据存储。当用户关闭浏览器窗口后，数据将会被实时删除。</p><p><b>分析：</b>用cookie存储的数据有大小限制，一般不可超过4096 个字节，而且cookie的安全系数不高，有被篡改的风险。不过其好处是几乎支持所有浏览器。</p><hr><p style="font-size: 2rem;font-weight:600;text-align:center;">END</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;style type=&quot;text/css&quot;&gt;
	.markdown-body h1,.markdown-body h2,.markdown-body h3,.markdown-body h4,
	.markdown-body h5,.markdown-body h6{
		te
      
    
    </summary>
    
      <category term="JS" scheme="https://github.com/categories/JS/"/>
    
    
      <category term="前端开发" scheme="https://github.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>JS监听中文输入</title>
    <link href="https://github.com/2018/05/25/JS%E7%9B%91%E5%90%AC%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5/"/>
    <id>https://github.com/2018/05/25/JS监听中文输入/</id>
    <published>2018-05-25T03:28:47.000Z</published>
    <updated>2018-05-26T01:29:03.272Z</updated>
    
    <content type="html"><![CDATA[<style type="text/css">.markdown-body h1,.markdown-body h2,.markdown-body h3,.markdown-body h4,.markdown-body h5,.markdown-body h6{text-indent: 2em;color:#4f4f4f;line-height: 1.5em;}.markdown-body p{text-indent: 2em;font-size: 1.65rem;color:#666666;line-height: 1.5em;}</style><h4>当时是在做<a href="https://wesbos.com/" target="_blank">Wes Bos</a>的<a href="https://javascript30.com/" target="_blank">javascript30</a>的一个<span style="color:#333333;background-color:rgb(255,255,255);">挑战</span>。在做第六个项目（根据输入框实时调用AJAX古诗匹配）时，当我们输入中文拼音，还在拼音字符状态未选择成中文时，一直在执行我编写的事件监听处理函数（当输入框里的值有变化时执行此函数，<strong>调用AJAX在页面显示数据里包含这些字的古诗</strong>）。而我想要的是在我们输入拼音未完成中文选择时，不让其执行我们的监听处理函数，只有选择完中文后才去执行调用AJAX<strong>判断有没有包含输入的这些字的古诗。</strong></h4><br><p style="color: #ff6600;">古诗匹配项目效果图如下：</p><br><p><img src="/2018/05/25/JS监听中文输入/20180518131816676.jpg" alt="古诗词输入搜索匹配"></p><br><p style="color: #ff6600;">此问题解决方法如下：</p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--HTML代码片段--&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; id=&quot;this_input&quot; placeholder=&quot;中文输入未完成时不执行事件&quot; /&gt;  </span><br><span class="line">&lt;script src=&quot;http://code.jquery.com/jquery-1.8.3.min.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;  </span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;  </span><br><span class="line">        $(&apos;#this_input&apos;).on(&apos;input propertychange&apos;, function () &#123;//input propertychange 当输入框里的值有变化时执行此函数  </span><br><span class="line">            if ($(this).prop(&apos;cnStart&apos;)) return;//如果正在执行中文输入时，此值为true，执行return=&gt;下面代码不执行  </span><br><span class="line">            console.log(&apos;当前输入：&apos; + $(this).val());  </span><br><span class="line">            //此处执行AJAX请求判断请求的数据中有没有包含输入的这些字的古诗  </span><br><span class="line">            //如果有，就将所有包含这些字的诗排列出来  </span><br><span class="line">        &#125;).on(&apos;compositionstart&apos;, function () &#123;//compositionstart 当输入框有非直接的文字输入时触发(如：输入拼音在待选状态时)  </span><br><span class="line">            $(this).prop(&apos;cnStart&apos;, true);  </span><br><span class="line">            console.log(&apos;正在中文输入&apos;);//将 cnStart 变为 true，此处执行完后会跳到  </span><br><span class="line">        &#125;).on(&apos;compositionend&apos;, function () &#123;//compositionend 当输入框有直接的文字输入时触发(如：输入拼音后完成了中文选择时)  </span><br><span class="line">            $(this).prop(&apos;cnStart&apos;, false);  </span><br><span class="line">            console.log(&apos;完成中文输入&apos;);  </span><br><span class="line">        &#125;);  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>当我们开始进行input的输入改变了input框里的值时，js会监听到input propertychange事件，执行判断(一开始时$(this).prop('cnStart')的值我们没有定义，为undefined，在监听了compositionstart和compositionend事件后会相应变为true和false，非true时不会进行return)，再输出文本，接下来此时会执行此函数中其它的一些操作(AJAX请求...)。</p><p>而当我们输入框输入的文字还在待选状态时（如：输入拼音未选择完成时），便会触发compositionstart事件，此时我们通过jquery的prop()方法给这个input元素添加自定义属性（cnStart：自定义名称，表示中文输入开始）和值（true），执行输出语句。此时执行完compositionstart事件后，因为输入框内文字有发生变化，会再去调用上面的input propertychange事件=>进行判断，此时$(this).prop('cnStart')的值为true，会执行return语句，因此便会截断下面的所有操作，使其不会去执行。</p><p>而当我们输入框输入的文字不在待选状态后（如：输入拼音后完成了中文选择时），便会触发compositionend事件，此时我们再将cnStart这个自定义属性设置为false，代表我们已经完成了中文输入，执行输出语句。此时执行完了compositionend事件，同上会再去调用input propertychange事件=>进行判断，此时$(this).prop('cnStart')的值为false，不会执行return语句，那么接下来才会顺利执行我们此函数中的一系列操作。</p><hr><p style="font-size: 2rem;font-weight:600;text-align:center;">END</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;style type=&quot;text/css&quot;&gt;
	.markdown-body h1,.markdown-body h2,.markdown-body h3,.markdown-body h4,
	.markdown-body h5,.markdown-body h6{
		te
      
    
    </summary>
    
      <category term="JS" scheme="https://github.com/categories/JS/"/>
    
    
      <category term="前端开发" scheme="https://github.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>关于一些动态创建的节点无法绑定事件的问题</title>
    <link href="https://github.com/2018/05/25/JS%E5%8A%A8%E6%80%81%E8%8A%82%E7%82%B9%E7%BB%91%E5%AE%9A/"/>
    <id>https://github.com/2018/05/25/JS动态节点绑定/</id>
    <published>2018-05-25T02:02:09.000Z</published>
    <updated>2018-05-26T01:29:08.917Z</updated>
    
    <content type="html"><![CDATA[<style type="text/css">.markdown-body h1,.markdown-body h2,.markdown-body h3,.markdown-body h4,.markdown-body h5,.markdown-body h6{text-indent: 2em;color:#4f4f4f;line-height: 1.5em;}.markdown-body p{text-indent: 2em;font-size: 1.65rem;color:#666666;line-height: 1.5em;}</style><h4>在我们HTML页面中有时候一些DOM元素节点（例如：一些页面加载的新闻公告列表[如下图]）是需要通过AJAX请求接口数据动态创建的，而当我们想在JS中想为这些节点绑定事件（如：click,hover...等）时便会出现无法绑定的情况，使用window.onload方法在页面加载后才执行也不行。</h4><p><img src="/2018/05/25/JS动态节点绑定/new_list.png" alt="新闻公告列表图片"></p><h4 id="解决办法"><a class="markdownIt-Anchor" href="#解决办法"></a> 解决办法：</h4><p>使用JQ提供的.on()和.delegate()方法可以解决解决此问题，给动态加载的元素成功绑定上事件，但是在这两种方法的参数中一定得写上我们需要绑定事件的那个元素选择器。</p><blockquote><p style="font-size: 1.8rem;">如:$("#parent").on("click",".list",function(){ }) 和  $("#parent").delegate("click",".list",function(){ }) 。</p></blockquote><p>这两种方法内的参数 .list 就是我们动态加载出来需要绑定事件的那个元素，前面的 #parent 是 .list 元素的父元素。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//javascript 代码</span><br><span class="line">//.list为新闻里的每一条公告，是我们动态创建的;#parent是一个包裹着里的这一行行公告的一个div。</span><br><span class="line">//一般来说，我们绑定事件的写法都是用下面的第一和第二种写法。但是这种写法是绑定不上的。</span><br><span class="line">$(&apos;#parent .list&apos;).click(function()&#123;//1.直接使用click(fn)方法绑定不上</span><br><span class="line">    console.log($(this).html());</span><br><span class="line">&#125;)</span><br><span class="line">$(&apos;#parent .list&apos;).on(&apos;click&apos;,function()&#123;//2.使用on(&quot;click&quot;,fn)方法还是绑定不上</span><br><span class="line">    console.log($(this).html());</span><br><span class="line">&#125;)</span><br><span class="line">$(&apos;#parent&apos;).on(&apos;click&apos;,&apos;.list&apos;,function()&#123;//3.此种写法可以成功绑定</span><br><span class="line">    //使用on(&quot;click&quot;,&quot;...&quot;,fn),在on里面增加一个参数（需要绑定的那个节点），同时前面调用.on方法的元素改为该节点的父元素即：$(&apos;#parent&apos;)</span><br><span class="line">    console.log($(this).html());</span><br><span class="line">&#125;)</span><br><span class="line">$(&apos;#parent&apos;).delegate(&apos;click&apos;,&apos;.list&apos;,function()&#123;//4.此种写法可以成功绑定</span><br><span class="line">    //使用delegate(&quot;click&quot;,&quot;...&quot;,fn),在delegate里面增加一个参数（需要绑定的那个节点），同时前面调用.delegate方法的元素改为该节点的父元素即：$(&apos;#parent&apos;)</span><br><span class="line">    console.log($(this).html());</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><p style="font-size: 2rem;font-weight:600;text-align:center;">END</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;style type=&quot;text/css&quot;&gt;
	.markdown-body h1,.markdown-body h2,.markdown-body h3,.markdown-body h4,
	.markdown-body h5,.markdown-body h6{
		te
      
    
    </summary>
    
      <category term="JS" scheme="https://github.com/categories/JS/"/>
    
    
      <category term="前端开发" scheme="https://github.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>今天创建了个人博客</title>
    <link href="https://github.com/2018/05/23/FirstNight/"/>
    <id>https://github.com/2018/05/23/FirstNight/</id>
    <published>2018-05-23T07:05:06.708Z</published>
    <updated>2018-05-25T03:19:11.589Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天根据网上教程创建了属于自己的个人博客，在这期间遇到了一些问题。</p></blockquote><h2 id="执行hexo-d命令时报错"><a class="markdownIt-Anchor" href="#执行hexo-d命令时报错"></a> 执行<strong>hexo -d</strong>命令时报错</h2><p>出现类似以下的报错代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">warning: LF will be replaced by CRLF <span class="keyword">in</span> 2015/12/05/hello-world/index.html.</span><br><span class="line">The file will have its original line endings <span class="keyword">in</span> your working directory.</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>此问题的解决方法是：修改根目录下的配置文件_config.yml，修改deploy节点。</p><p>原来的配置为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://github.com/&#123;myname&#125;/&#123;myname&#125;.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>将其修改成如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://&#123;myname&#125;：&#123;mypassword&#125;@github.com/&#123;myname&#125;/&#123;myname&#125;.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>如此，便解决了执行<strong>hexo -d</strong>命令时报错的问题。</p><h2 id="每次写完博客后需要执行-hexo-clean-hexo-g-hexo-d-命令上传"><a class="markdownIt-Anchor" href="#每次写完博客后需要执行-hexo-clean-hexo-g-hexo-d-命令上传"></a> 每次写完博客后需要执行 $ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 命令上传。</h2><p>不要执行  hexo clean &amp;&amp; hexo g 会清除一些自己创建在 public 目录下的文件(自己添加的grace主题的about模块)。<br>每次修改和上传新博客时，执行 hexo d 命令就行了。</p><h2 id="博客文件地址在-source_posts目录下"><a class="markdownIt-Anchor" href="#博客文件地址在-source_posts目录下"></a> 博客文件地址在 source/_posts/目录下。</h2><h2 id="网络博客主题模板"><a class="markdownIt-Anchor" href="#网络博客主题模板"></a> 网络博客主题模板：</h2><h3 id="更换模板方法例更换-grace-模板"><a class="markdownIt-Anchor" href="#更换模板方法例更换-grace-模板"></a> 更换模板方法(例：更换 grace 模板)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/buhuo00/hexo-theme-grace themes/grace</span><br></pre></td></tr></table></figure><p>再到_config.yml配置文件中修改模板参数theme为  theme： grace</p><h3 id="待选模板"><a class="markdownIt-Anchor" href="#待选模板"></a> 待选模板</h3><p>git clone <a href="https://github.com/beevesnoodles/hexo-theme-grace.git">https://github.com/beevesnoodles/hexo-theme-grace.git</a>  themes/grace<br><a href="https://www.buhuoblog.com/" target="_blank" rel="noopener">简洁型</a>: <a href="https://github.com/buhuo00/hexo-theme-grace">https://github.com/buhuo00/hexo-theme-grace</a></p><hr><p style="font-size: 2rem;text-align:center;">END</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;今天根据网上教程创建了属于自己的个人博客，在这期间遇到了一些问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;执行hexo-d命令时报错&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#执行hexo-d命令时报错
      
    
    </summary>
    
      <category term="配置介绍" scheme="https://github.com/categories/%E9%85%8D%E7%BD%AE%E4%BB%8B%E7%BB%8D/"/>
    
    
      <category term="hexo配置" scheme="https://github.com/tags/hexo%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
</feed>
