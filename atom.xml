<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>周璇的个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhouxuan001.github.io/"/>
  <updated>2019-07-26T01:45:17.016Z</updated>
  <id>https://zhouxuan001.github.io/</id>
  
  <author>
    <name>zhou xuan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>今天创建了个人博客</title>
    <link href="https://zhouxuan001.github.io/2019/07/25/%E4%BB%8A%E5%A4%A9%E5%88%9B%E5%BB%BA%E4%BA%86%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://zhouxuan001.github.io/2019/07/25/今天创建了个人博客/</id>
    <published>2019-07-25T09:37:08.379Z</published>
    <updated>2019-07-26T01:45:17.016Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天根据网上教程创建了属于自己的个人博客。</p></blockquote><blockquote><p>参考博客主题：<a href="https://blog.cofess.com/" target="_blank" rel="noopener">https://blog.cofess.com/</a></p></blockquote><h2 id="执行hexo-d命令时报错"><a class="markdownIt-Anchor" href="#执行hexo-d命令时报错"></a> 执行<strong>hexo -d</strong>命令时报错</h2><p>出现类似以下的报错代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">warning: LF will be replaced by CRLF <span class="keyword">in</span> 2015/12/05/hello-world/index.html.</span><br><span class="line">The file will have its original line endings <span class="keyword">in</span> your working directory.</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>此问题的解决方法是：修改根目录下的配置文件_config.yml，修改deploy节点。原因是没有配置正确的git仓库地址。</p><p>原来的配置为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://github.com/&#123;myname&#125;/&#123;myname&#125;.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>将其修改成如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://&#123;myname&#125;：&#123;mypassword&#125;@github.com/&#123;myname&#125;/&#123;myname&#125;.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>如此，便解决了执行<strong>hexo -d</strong>命令时报错的问题。</p><h2 id="从博客仓库地址-克隆项目文件前提是已经搭建好自己的博客仓库了把下面的-zhouxuan001-换成你自己的博客账号名"><a class="markdownIt-Anchor" href="#从博客仓库地址-克隆项目文件前提是已经搭建好自己的博客仓库了把下面的-zhouxuan001-换成你自己的博客账号名"></a> 从博客仓库地址 克隆项目文件(前提是已经搭建好自己的博客仓库了，把下面的 zhouxuan001 换成你自己的博客账号名)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:zhouxuan001/zhouxuan001.github.io.git</span><br></pre></td></tr></table></figure><p>克隆完分别执行以下代码安装npm依赖以及hexo部署发布插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install</span><br><span class="line">$ npm install hexo-deployer-git</span><br></pre></td></tr></table></figure><p>在我们的博客文件仓库里有master分支和hexo分支，分别保存静态网页和源文件。</p><p>博客有进行修改变动以后：</p><p>执行git add .  、git commit -m “” 、 git push origin hexo来提交hexo网站源文件以供备份</p><p>依次执行 hexo clean &amp;&amp; hexo g &amp;&amp; hexo d生成静态网页部署至Github上</p><h2 id="每次写完博客后需要执行-hexo-clean-hexo-g-hexo-d-命令上传"><a class="markdownIt-Anchor" href="#每次写完博客后需要执行-hexo-clean-hexo-g-hexo-d-命令上传"></a> 每次写完博客后需要执行 $ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 命令上传。</h2><h2 id="使用hexo的一些指令"><a class="markdownIt-Anchor" href="#使用hexo的一些指令"></a> 使用hexo的一些指令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 基本指令(将博客变更更新到个人github网站上)</span></span><br><span class="line">hexo s == hexo server <span class="comment">#启动本地服务器预览</span></span><br><span class="line">hexo clean <span class="comment">#清除缓存 ,网页正常情况下可以忽略此条命令,执行该指令后,会删掉站点根目录下的public文件夹,通过hexo g重新生成</span></span><br><span class="line">hexo g == hexo generate <span class="comment">#生成静态网页(执行$ hexo g后会在站点根目录下生成public文件夹,hexo会将source目录下面的.md后缀的文件编译为.html后缀的文件,存放在/blog/public/路径下)</span></span><br><span class="line">hexo d <span class="comment">#将本地数据部署到远端服务器(如github)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 提交整个网站源文件(将整个博客文件上传到git的网站源文件hexo分支上)</span></span><br><span class="line">git add .                <span class="comment">#添加修改代码到缓存（注意最后的"."前面有个空格</span></span><br><span class="line">git commit -m <span class="string">"xxx"</span>      <span class="comment">#添加提交代码的备注（xxx为本次提交代码的备注）</span></span><br><span class="line">git push origin hexo     <span class="comment">#提交代码到指定分支（hexo为要提交代码的分支名称）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 其余指令：</span></span><br><span class="line">git branch              <span class="comment">#查看当前所属分支 master/hexo</span></span><br><span class="line">git branch -a           <span class="comment">#查看所有分支</span></span><br><span class="line">git checkout hexo        <span class="comment">#切换到某一分支(hexo填写要切换的分支名称）</span></span><br></pre></td></tr></table></figure><h2 id="博客文件地址在-source_posts目录下"><a class="markdownIt-Anchor" href="#博客文件地址在-source_posts目录下"></a> 博客文件地址在 source/_posts/目录下。</h2><h2 id="网络博客主题模板"><a class="markdownIt-Anchor" href="#网络博客主题模板"></a> 网络博客主题模板：</h2><h3 id="更换模板方法例更换-grace-模板"><a class="markdownIt-Anchor" href="#更换模板方法例更换-grace-模板"></a> 更换模板方法(例：更换 grace 模板)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/buhuo00/hexo-theme-grace themes/grace</span><br></pre></td></tr></table></figure><p>再到根目录_config.yml配置文件中修改模板参数theme为  theme： grace</p><hr><p style="font-size: 2rem;text-align:center;">END</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;今天根据网上教程创建了属于自己的个人博客。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;参考博客主题：&lt;a href=&quot;https://blog.cofess.com/&quot; target=&quot;_blank&quot; rel=&quot;noope
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>响应式开发(01)</title>
    <link href="https://zhouxuan001.github.io/2018/06/22/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%BC%80%E5%8F%91(01)/"/>
    <id>https://zhouxuan001.github.io/2018/06/22/响应式开发(01)/</id>
    <published>2018-06-22T06:47:00.000Z</published>
    <updated>2019-07-25T09:37:08.379Z</updated>
    
    <content type="html"><![CDATA[<h3 id="响应式开发中获取用户设备信息的方法" class="h3_1">响应式开发中获取用户设备信息的方法</h3><blockquote><p>var u = navigator.userAgent;</p></blockquote><h4 id="判断是否是Android设备" class="h4">判断是否是Android设备</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (u.indexOf(&quot;Android&quot;)&gt;-1||u.indexOf(&quot;Adr&quot;)&gt;-1) &#123;</span><br><span class="line">console.log(&quot;Android设备&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="判断是否是iPhone设备" class="h4">判断是否是iPhone设备</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (u.indexOf(&quot;iPhone&quot;)&gt;-1) &#123;</span><br><span class="line">console.log(&quot;iPhone设备&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="判断是否是iPad设备" class="h4">判断是否是iPad设备</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (u.indexOf(&quot;iPad&quot;)&gt;-1) &#123;</span><br><span class="line">console.log(&quot;iPad设备&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="剩下的就是PC设备了" class="h4">剩下的就是PC设备了</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">else&#123;</span><br><span class="line">console.log(&quot;PC设备&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1111</p><hr><p style="font-size: 2rem;font-weight:600;text-align:center;">END</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;响应式开发中获取用户设备信息的方法&quot; class=&quot;h3_1&quot;&gt;
	响应式开发中获取用户设备信息的方法
&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;var u = navigator.userAgent;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;判断是
      
    
    </summary>
    
      <category term="前端开发" scheme="https://zhouxuan001.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="响应式开发" scheme="https://zhouxuan001.github.io/tags/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>每日小记(01)</title>
    <link href="https://zhouxuan001.github.io/2018/06/21/%E6%AF%8F%E6%97%A5%E5%B0%8F%E8%AE%B0(01)/"/>
    <id>https://zhouxuan001.github.io/2018/06/21/每日小记(01)/</id>
    <published>2018-06-21T06:40:00.000Z</published>
    <updated>2019-07-25T09:37:08.379Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开发一个转盘游戏时遇到的多终端兼容问题">开发一个转盘游戏时遇到的多终端兼容问题</h2><p>我前端这边写了一个预加载执行函数,就是需要在页面加载完成之后执行这个里面的一系列操作,我在里面执行的是一个调用后端接口的函数,我需要调用这个接口来渲染页面数据。</p><p>但是在ios端运行时,执行调用后端接口时返回的状态一直是error,在安卓那边运行没有一点毛病。</p><p>实在理解不了,也想不出来是什么导致的。</p><p>后面觉得可能是ios中数据加载得比较慢的原因,于是使用一个倒计时来延时执行我们需要在页面完成之后再调用后端接口的函数,于是成功解决了这个问题。</p><h2 id="其他问题">其他问题</h2><p>安卓端那边调用执行调用后端接口后,也出现过接口状态一直是error的情况。</p><p>原因是安卓APP端不支持ajax跨域请求,解决方法是让安卓那边加上支持跨域访问的代码。</p><hr><p style="font-size: 2rem;font-weight:600;text-align:center;">END</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;开发一个转盘游戏时遇到的多终端兼容问题&quot;&gt;
	开发一个转盘游戏时遇到的多终端兼容问题
&lt;/h2&gt;
&lt;p&gt;
	我前端这边写了一个预加载执行函数,就是需要在页面加载完成之后执行这个里面的一系列操作,我在里面执行的是一个调用后端接口的函数,我需要调用这个接口来渲染页面数
      
    
    </summary>
    
      <category term="每日小记" scheme="https://zhouxuan001.github.io/categories/%E6%AF%8F%E6%97%A5%E5%B0%8F%E8%AE%B0/"/>
    
    
      <category term="日常积累" scheme="https://zhouxuan001.github.io/tags/%E6%97%A5%E5%B8%B8%E7%A7%AF%E7%B4%AF/"/>
    
  </entry>
  
  <entry>
    <title>手把手教你搭建博客</title>
    <link href="https://zhouxuan001.github.io/2018/06/05/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://zhouxuan001.github.io/2018/06/05/手把手教你搭建博客/</id>
    <published>2018-06-05T03:25:00.000Z</published>
    <updated>2019-07-25T09:37:08.379Z</updated>
    
    <content type="html"><![CDATA[<h3 style="text-indent: 0;">前言：我今天新创建了属于自己的博客，还是很简单的，接下来让我来教大家怎么搭建博客吧！</h3><!-- <p>你们怕是群傻子哦，什么都点进来看哦！想看的话有种那就看完哦！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.我没有想到一个人竟然如此的纯真，而且是很傻很天真哦！</span><br><span class="line">2.你的长相很提神!</span><br><span class="line">3.你需要回炉重造!</span><br><span class="line">4.毕竟这也不是一个人贱人爱的社会，你还是收敛一点的好。</span><br><span class="line">5.你的智商和喜马拉雅山的氧气一样，淡薄。</span><br><span class="line">6.给你剑仙你不当，赐你剑神你不做，非死皮赖脸哭着喊着要做剑人！真是的，何必呢？！</span><br><span class="line">7.你长得很有创意，但我知道丑并不是你的本意。90岁以上的见了蹬腿倒地，9岁以下见了惊奇不已。希望上天不要发脾气，希望你勇敢的活下去。用你的丑来衬托世界的美丽。</span><br><span class="line">8.我以为你只是1和3中间的数，没想到你还是1和3俩数的组合。</span><br><span class="line">9.低下头看看你裤裆里是啥，再和你哥哥说话。</span><br></pre></td></tr></table></figure><p>以上纯属玩笑！虽然你们傻不拉几的，但是爸爸还是爱你们的！</p> --><hr><p style="font-size: 2rem;font-weight:600;text-align:center;">END</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 style=&quot;text-indent: 0;&quot;&gt;
	前言：我今天新创建了属于自己的博客，还是很简单的，接下来让我来教大家怎么搭建博客吧！
&lt;/h3&gt;
&lt;!-- &lt;p&gt;
	你们怕是群傻子哦，什么都点进来看哦！想看的话有种那就看完哦！
&lt;/p&gt;

&lt;figure class=
      
    
    </summary>
    
      <category term="分享教程" scheme="https://zhouxuan001.github.io/categories/%E5%88%86%E4%BA%AB%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="博客搭建" scheme="https://zhouxuan001.github.io/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序学习(01)</title>
    <link href="https://zhouxuan001.github.io/2018/06/04/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92-01/"/>
    <id>https://zhouxuan001.github.io/2018/06/04/微信小程序学习计划-01/</id>
    <published>2018-06-04T07:00:00.000Z</published>
    <updated>2019-07-25T09:37:08.379Z</updated>
    
    <content type="html"><![CDATA[<h3 style="text-indent: 0;">待编辑</h3><p></p><hr><p style="font-size: 2rem;font-weight:600;text-align:center;">END</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 style=&quot;text-indent: 0;&quot;&gt;
	待编辑
&lt;/h3&gt;
&lt;p&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;p style=&quot;font-size: 2rem;font-weight:600;text-align:center;&quot;&gt;
	END
&lt;/p&gt;
      
    
    </summary>
    
      <category term="学习计划" scheme="https://zhouxuan001.github.io/categories/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
    
    
      <category term="微信小程序了解一哈" scheme="https://zhouxuan001.github.io/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%86%E8%A7%A3%E4%B8%80%E5%93%88/"/>
    
  </entry>
  
  <entry>
    <title>CSS完成元素水平垂直居中</title>
    <link href="https://zhouxuan001.github.io/2018/05/31/CSS%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/"/>
    <id>https://zhouxuan001.github.io/2018/05/31/CSS水平垂直居中/</id>
    <published>2018-05-31T07:39:00.000Z</published>
    <updated>2019-07-25T09:37:08.376Z</updated>
    
    <content type="html"><![CDATA[<h3>要求：子元素和父元素宽高不确定，需要设置子元素水平垂直居中，效果如下图：</h3><p><img src="/2018/05/31/CSS水平垂直居中/center.png" alt="水平垂直效果图"></p><h4>这里提供几种简单的实现方法：</h4><h4>1.使用margin:auto属性实现【兼容IE7以上大部分浏览器】</h4><p>首先这个元素和它的父元素都要设置定位，其中这个要水平垂直居中的元素需设置绝对定位absolute，然后再给它设置样式{left: 0;right: 0;top: 0;bottom: 0;margin:auto;}。这样便可以实现元素在父容器里垂直居中显示了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">.parent&#123;</span><br><span class="line">/*子元素和父元素宽高随意，都可以实现水平垂直居中，这里随便设置了一个宽高撑开盒子容器体积，方便查看效果*/</span><br><span class="line">width: 600px;</span><br><span class="line">height: 500px;</span><br><span class="line">background: #222222;</span><br><span class="line">position: relative;</span><br><span class="line">&#125;</span><br><span class="line">.child&#123;</span><br><span class="line">width: 150px;</span><br><span class="line">height: 200px;</span><br><span class="line">background: goldenrod;</span><br><span class="line">position: absolute;</span><br><span class="line">left: 0;</span><br><span class="line">right: 0;</span><br><span class="line">top: 0;</span><br><span class="line">bottom: 0;</span><br><span class="line">margin: auto;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4>2.使用transform属性实现【浏览器兼容性：Safari 3.1+、 Chrome 8+、Firefox 4+、Opera 10+、IE10+】</h4><p>同上，设置好定位。然后添加样式{left: 50%;top: 50%;transform: translateX(-50%) translateY(-50%);}便好了。其中的translateX(-50%)表示将此元素在X轴上向左移50%元素宽度的距离，同理translateY(-50%)将元素在Y轴上向上移50%元素高度的距离。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">.parent&#123;</span><br><span class="line">/*子元素和父元素宽高随意，都可以实现水平垂直居中，这里随便设置了一个宽高撑开盒子容器体积，方便查看效果*/</span><br><span class="line">width: 600px;</span><br><span class="line">height: 500px;</span><br><span class="line">background: #222222;</span><br><span class="line">position: relative;</span><br><span class="line">&#125;</span><br><span class="line">.child&#123;</span><br><span class="line">width: 150px;</span><br><span class="line">height: 200px;</span><br><span class="line">background: goldenrod;</span><br><span class="line">position: absolute;</span><br><span class="line">left: 50%;</span><br><span class="line">top: 50%;</span><br><span class="line">transform: translateX(-50%) translateY(-50%);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4>3.使用flex布局实现【浏览器兼容性：Safari 9+、 Chrome 29+、Firefox 28+、Opera 17+、IE10+】</h4><p>首先给父元素设置flex布局{display: flex;}，然后父元素再设置align-items: center;可以使其包裹的子元素在水平方向上水平居中排列，再就是{justify-content: center;}属性规定了子元素在Y轴垂直方向上是居中排列。这样便实现了使用flex完成水平垂直居中的布局。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">.parent&#123;</span><br><span class="line">/*子元素和父元素宽高随意，都可以实现水平垂直居中，这里随便设置了一个宽高撑开盒子容器体积，方便查看效果*/</span><br><span class="line">width: 600px;</span><br><span class="line">height: 500px;</span><br><span class="line">background: #222222;</span><br><span class="line">display: flex;</span><br><span class="line">align-items: center;</span><br><span class="line">justify-content: center;</span><br><span class="line">&#125;</span><br><span class="line">.child&#123;</span><br><span class="line">width: 150px;</span><br><span class="line">height: 200px;</span><br><span class="line">background: goldenrod;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><hr><p style="font-size: 2rem;font-weight:600;text-align:center;">END</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt;
	要求：子元素和父元素宽高不确定，需要设置子元素水平垂直居中，效果如下图：
&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/2018/05/31/CSS水平垂直居中/center.png&quot; alt=&quot;水平垂直效果图&quot;&gt;&lt;/p&gt;
&lt;h4&gt;
	这里提供几种简单的实现方法：
&lt;/h4
      
    
    </summary>
    
      <category term="前端开发" scheme="https://zhouxuan001.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="CSS" scheme="https://zhouxuan001.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>使用jQuery中hover事件时遇到的一个小问题</title>
    <link href="https://zhouxuan001.github.io/2018/05/26/hover%E4%BA%8B%E4%BB%B6%E9%81%87%E5%88%B0%E7%9A%84%E5%B0%8F%E9%97%AE%E9%A2%98/"/>
    <id>https://zhouxuan001.github.io/2018/05/26/hover事件遇到的小问题/</id>
    <published>2018-05-26T08:52:00.000Z</published>
    <updated>2019-07-25T09:37:08.378Z</updated>
    
    <content type="html"><![CDATA[<p>在jQuery中有一个hover()方法，它可以实现模拟css中：hover这个伪类的效果。</p><p>css伪类写法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">a:hover&#123;  </span><br><span class="line">    color: #ccc;  </span><br><span class="line">&#125;  </span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>jQuery中hover()方法如下 ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">$(&quot;a&quot;).hover(function()&#123;  </span><br><span class="line">    $(this).css(&#123;&quot;color&quot;:&quot;#ccc&quot;&#125;);  </span><br><span class="line">    console.log(1);  </span><br><span class="line">&#125;) </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>如上所示，两种方法都可以完美的实现我们想要的效果。</p><p>但是，在这其中其实还隐藏着一个很难发现的bug。</p><p>如上，在hover()这个函数中，我们写了一个function方法，但是我们不知道的是，我们写在这个function中的代码其实一直都会被重复执行两次。它在鼠标移入的时候执行了一次，移出的时候又会执行一次(通过控制台查看可以看到我们代码中的console.log(1)中的1总共被输出了两次)。</p><p>而我们的本意是只想让它在鼠标移入的时候执行我们的代码，这与我们想要的效果不一样，那么这到底是什么原因导致的呢？</p><p>搜索官方jQuery文档中hover()方法的说明我们就会发现，其实这是jQuery中hover()内置方法的问题。jQuery中的hover()方法中一共封装有两个function函数，第一个是在移入时执行，第二个是在移出时执行的，而当我们像上面一样只写了一个function函数的时候，它就会默认这个function函数就是我们想让它在移入和移出时都被执行的函数，也就相当于将这个函数执行了两遍。</p><p>当然，这个bug对于执行一些普通的效果是没什么影响的。但是，当触及到跟时间有关的一些动画效果（例如：jQuery中的animate()函数）的时候，就会出现问题。如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">$(&quot;.box&quot;).hover(function()&#123;  </span><br><span class="line">    var this_h=$(this).height()+50; </span><br><span class="line">    $(this).animate(&#123;&quot;height&quot;:this_h+&quot;px&quot;&#125;,1000);//每次高度在上一次数值的基础上用动画形式增加50 </span><br><span class="line">&#125;)  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们想要实现的效果是，当鼠标移入到class为box的这个元素的时候，我们先获取它的高度，再将这个高度数值增加50赋予一个变量this_h，然后用jQuery内置的animate()动画方法使这个元素1000毫秒内高度在原先的基础上增加50px。之后其它每次移入时都将box这个元素的高度在原先的基础上增加50，下次再移入，再增加50的高度。但是实际执行效果却是：一开始移入时，增加了50的高度，然后移出的时候，又增加了50高度，之后再次移入移出又陆续增加了100的高度。</p><p>那这样的话明显不对啊，那么，怎么解决这个问题呢？</p><p>很简单，我们在hover事件中写入两个function函数就好了，其中第一个是我们要让它在移入的时候执行的效果，第二个是让它在移出的时候执行的效果。像我们上面这种情况的话就可以在第二个函数里面什么都不写就好了，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">$(&quot;.box&quot;).hover(function()&#123;  </span><br><span class="line">    var this_h=$(this).height()+50;</span><br><span class="line">    $(this).animate(&#123;&quot;height&quot;:this_h+&quot;px&quot;&#125;,1000);//每次高度在上一次数值的基础上用动画形式增加50 </span><br><span class="line">&#125;,function()&#123;  </span><br><span class="line">    //我是第二个函数，什么都不写的时候，在移出的时候hover方法什么都不会执行。  </span><br><span class="line">&#125;)  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>当然，像这些效果的话，其实也有很多别的方法可以完成的，比如我们也可以使用jQuery中的一些其他鼠标事件（例如：onmouseover、onmouseout、onmouseenter、onmouseleave等）来实现，没必要一味地使用hover()来进行事件的编写。</p><hr><p style="font-size: 2rem;font-weight:600;text-align:center;">END</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;
	在jQuery中有一个hover()方法，它可以实现模拟css中：hover这个伪类的效果。
&lt;/p&gt;
&lt;p&gt;
	css伪类写法如下：
&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;
      
    
    </summary>
    
      <category term="前端开发" scheme="https://zhouxuan001.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="jQuery" scheme="https://zhouxuan001.github.io/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>HTML里的数据存储分析</title>
    <link href="https://zhouxuan001.github.io/2018/05/25/%E6%B5%85%E6%9E%90HTML%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/"/>
    <id>https://zhouxuan001.github.io/2018/05/25/浅析HTML数据存储/</id>
    <published>2018-05-25T05:53:52.000Z</published>
    <updated>2019-07-25T09:37:08.380Z</updated>
    
    <content type="html"><![CDATA[<h4 style="margin-bottom:0px;">在前端开发工作中，常用的数据存储有三种，分别是cookie，localStorage和sessionStorage。其中，cookie是存储在浏览器的一段文本，而localStorage和sessionStorage则是HTML5中所提供的本地存储。</h4><h4 style="margin-top:0px;">那么，这几种数据存储方式之间有什么区别呢？让我们来了解一下。</h4><h4>1.cookie</h4><p>cookie是什么?cookie就是一段文本，它存储在客户端（通常来说是浏览器），目前为各大主流浏览器存储数据所用。一般来说用其存储的数据有比如：名字、密码、日期...等信息。cookie存储的数据能在客户端上保留相当长的时间。</p><p><b>分析：</b>用cookie存储的数据有大小限制，一般不可超过4096 个字节(4kb)，而且cookie的安全系数不高，有被篡改的风险。不过其好处是几乎支持所有浏览器。</p><h4>2.localStorage 和 sessionStorage</h4><div class="passages"><!--passages：段落专用div类标签--><p>localStorage和sessionStorage是HTML5 提供的两种在客户端存储数据的新方法。主要目的是为了克服由cookie所带来的一些限制，当数据需要被严格控制在客户端时，不需要持续的将数据发回服务器。同时它们能够存储的数据大小一般都是：5MB，可以在不影响网站性能的前提下将大量数据存储于本地。</p><p>localStorage是本地存储，它的生命周期是永久的，关闭页面或浏览器之后localStorage中的数据也不会消失。除非主动删除数据，否则数据永远不会消失。</p><p>sessionStorage是会话存储，它是针对一个session(会话) 进行数据存储，它的生命周期仅在当前会话下有效。当用户关闭浏览器窗口后，数据将会被实时删除。</p></div><p><b>分析：</b>localStorage和sessionStorage的存储空间更大；数据不会传送到服务器，减少了客户端和服务器端的交互，节省了网络流量；同时数据不发送到服务器端，不会担心数据被截获，安全性相对于cookie更高一些。</p><hr><p style="font-size: 2rem;font-weight:600;text-align:center;">END</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 style=&quot;margin-bottom:0px;&quot;&gt;
	在前端开发工作中，常用的数据存储有三种，分别是cookie，localStorage和sessionStorage。
	其中，cookie是存储在浏览器的一段文本，而localStorage和sessionStor
      
    
    </summary>
    
      <category term="前端开发" scheme="https://zhouxuan001.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="JS" scheme="https://zhouxuan001.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS监听中文输入</title>
    <link href="https://zhouxuan001.github.io/2018/05/25/JS%E7%9B%91%E5%90%AC%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5/"/>
    <id>https://zhouxuan001.github.io/2018/05/25/JS监听中文输入/</id>
    <published>2018-05-25T03:28:47.000Z</published>
    <updated>2019-07-25T09:37:08.378Z</updated>
    
    <content type="html"><![CDATA[<h4 style="text-indent: 2em;">当时是在做<a href="https://wesbos.com/" target="_blank">Wes Bos</a>的<a href="https://javascript30.com/" target="_blank">javascript30</a>的一个<span style="color:#333333;background-color:rgb(255,255,255);">挑战</span>。在做第六个项目（根据输入框实时调用AJAX古诗匹配）时，当我们输入中文拼音，还在拼音字符状态未选择成中文时，一直在执行我编写的事件监听处理函数（当输入框里的值有变化时执行此函数，<strong>调用AJAX在页面显示数据里包含这些字的古诗</strong>）。而我想要的是在我们输入拼音未完成中文选择时，不让其执行我们的监听处理函数，只有选择完中文后才去执行调用AJAX<strong>判断有没有包含输入的这些字的古诗。</strong></h4><br><p style="color: #ff6600;">古诗匹配项目效果图如下：</p><br><p><img src="/2018/05/25/JS监听中文输入/20180518131816676.jpg" alt="古诗词输入搜索匹配"></p><br><p style="color: #ff6600;">此问题解决方法如下：</p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--HTML代码片段--&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; id=&quot;this_input&quot; placeholder=&quot;中文输入未完成时不执行事件&quot; /&gt;  </span><br><span class="line">&lt;script src=&quot;http://code.jquery.com/jquery-1.8.3.min.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;  </span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;  </span><br><span class="line">        $(&apos;#this_input&apos;).on(&apos;input propertychange&apos;, function () &#123;//input propertychange 当输入框里的值有变化时执行此函数  </span><br><span class="line">            if ($(this).prop(&apos;cnStart&apos;)) return;//如果正在执行中文输入时，此值为true，执行return=&gt;下面代码不执行  </span><br><span class="line">            console.log(&apos;当前输入：&apos; + $(this).val());  </span><br><span class="line">            //此处执行AJAX请求判断请求的数据中有没有包含输入的这些字的古诗  </span><br><span class="line">            //如果有，就将所有包含这些字的诗排列出来  </span><br><span class="line">        &#125;).on(&apos;compositionstart&apos;, function () &#123;//compositionstart 当输入框有非直接的文字输入时触发(如：输入拼音在待选状态时)  </span><br><span class="line">            $(this).prop(&apos;cnStart&apos;, true);  </span><br><span class="line">            console.log(&apos;正在中文输入&apos;);//将 cnStart 变为 true，此处执行完后会跳到  </span><br><span class="line">        &#125;).on(&apos;compositionend&apos;, function () &#123;//compositionend 当输入框有直接的文字输入时触发(如：输入拼音后完成了中文选择时)  </span><br><span class="line">            $(this).prop(&apos;cnStart&apos;, false);  </span><br><span class="line">            console.log(&apos;完成中文输入&apos;);  </span><br><span class="line">        &#125;);  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>当我们开始进行input的输入改变了input框里的值时，js会监听到input propertychange事件，执行判断(一开始时$(this).prop('cnStart')的值我们没有定义，为undefined，在监听了compositionstart和compositionend事件后会相应变为true和false，非true时不会进行return)，再输出文本，接下来此时会执行此函数中其它的一些操作(AJAX请求...)。</p><p>而当我们输入框输入的文字还在待选状态时（如：输入拼音未选择完成时），便会触发compositionstart事件，此时我们通过jquery的prop()方法给这个input元素添加自定义属性（cnStart：自定义名称，表示中文输入开始）和值（true），执行输出语句。此时执行完compositionstart事件后，因为输入框内文字有发生变化，会再去调用上面的input propertychange事件=>进行判断，此时$(this).prop('cnStart')的值为true，会执行return语句，因此便会截断下面的所有操作，使其不会去执行。</p><p>而当我们输入框输入的文字不在待选状态后（如：输入拼音后完成了中文选择时），便会触发compositionend事件，此时我们再将cnStart这个自定义属性设置为false，代表我们已经完成了中文输入，执行输出语句。此时执行完了compositionend事件，同上会再去调用input propertychange事件=>进行判断，此时$(this).prop('cnStart')的值为false，不会执行return语句，那么接下来才会顺利执行我们此函数中的一系列操作。</p><hr><p style="font-size: 2rem;font-weight:600;text-align:center;">END</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 style=&quot;text-indent: 2em;&quot;&gt;
	当时是在做
	&lt;a href=&quot;https://wesbos.com/&quot; target=&quot;_blank&quot;&gt;Wes Bos&lt;/a&gt;的
	&lt;a href=&quot;https://javascript30.com/&quot; targe
      
    
    </summary>
    
      <category term="前端开发" scheme="https://zhouxuan001.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="JS" scheme="https://zhouxuan001.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>关于一些动态创建的节点无法绑定事件的问题</title>
    <link href="https://zhouxuan001.github.io/2018/05/25/JS%E5%8A%A8%E6%80%81%E8%8A%82%E7%82%B9%E7%BB%91%E5%AE%9A/"/>
    <id>https://zhouxuan001.github.io/2018/05/25/JS动态节点绑定/</id>
    <published>2018-05-25T02:02:09.000Z</published>
    <updated>2019-07-25T09:37:08.376Z</updated>
    
    <content type="html"><![CDATA[<h4 style="text-indent: 2em;">在我们HTML页面中有时候一些DOM元素节点（例如：一些页面加载的新闻公告列表[如下图]）是需要通过AJAX请求接口数据动态创建的，而当我们想在JS中想为这些节点绑定事件（如：click,hover...等）时便会出现无法绑定的情况，使用window.onload方法在页面加载后才执行也不行。</h4><p><img src="/2018/05/25/JS动态节点绑定/new_list.png" alt="新闻公告列表图片"></p><h4 id="解决办法"><a class="markdownIt-Anchor" href="#解决办法"></a> 解决办法：</h4><p>使用JQ提供的.on()和.delegate()方法可以解决解决此问题，给动态加载的元素成功绑定上事件，但是在这两种方法的参数中一定得写上我们需要绑定事件的那个元素选择器。</p><blockquote><p style="font-size: 1.8rem;">如:$("#parent").on("click",".list",function(){ }) 和  $("#parent").delegate("click",".list",function(){ }) 。</p></blockquote><p>这两种方法内的参数 .list 就是我们动态加载出来需要绑定事件的那个元素，前面的 #parent 是 .list 元素的父元素。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//javascript 代码</span><br><span class="line">//.list为新闻里的每一条公告，是我们动态创建的;#parent是一个包裹着里的这一行行公告的一个div。</span><br><span class="line">//一般来说，我们绑定事件的写法都是用下面的第一和第二种写法。但是这种写法是绑定不上的。</span><br><span class="line">$(&apos;#parent .list&apos;).click(function()&#123;//1.直接使用click(fn)方法绑定不上</span><br><span class="line">    console.log($(this).html());</span><br><span class="line">&#125;)</span><br><span class="line">$(&apos;#parent .list&apos;).on(&apos;click&apos;,function()&#123;//2.使用on(&quot;click&quot;,fn)方法还是绑定不上</span><br><span class="line">    console.log($(this).html());</span><br><span class="line">&#125;)</span><br><span class="line">$(&apos;#parent&apos;).on(&apos;click&apos;,&apos;.list&apos;,function()&#123;//3.此种写法可以成功绑定</span><br><span class="line">    //使用on(&quot;click&quot;,&quot;...&quot;,fn),在on里面增加一个参数（需要绑定的那个节点），同时前面调用.on方法的元素改为该节点的父元素即：$(&apos;#parent&apos;)</span><br><span class="line">    console.log($(this).html());</span><br><span class="line">&#125;)</span><br><span class="line">$(&apos;#parent&apos;).delegate(&apos;click&apos;,&apos;.list&apos;,function()&#123;//4.此种写法可以成功绑定</span><br><span class="line">    //使用delegate(&quot;click&quot;,&quot;...&quot;,fn),在delegate里面增加一个参数（需要绑定的那个节点），同时前面调用.delegate方法的元素改为该节点的父元素即：$(&apos;#parent&apos;)</span><br><span class="line">    console.log($(this).html());</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><p style="font-size: 2rem;font-weight:600;text-align:center;">END</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 style=&quot;text-indent: 2em;&quot;&gt;
	在我们HTML页面中有时候一些DOM元素节点（例如：一些页面加载的新闻公告列表[如下图]）是需要通过AJAX请求接口数据动态创建的，
	而当我们想在JS中想为这些节点绑定事件（如：click,hover...等）时便
      
    
    </summary>
    
      <category term="前端开发" scheme="https://zhouxuan001.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="JS" scheme="https://zhouxuan001.github.io/tags/JS/"/>
    
  </entry>
  
</feed>
