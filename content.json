{"meta":{"title":"周璇的个人博客","subtitle":null,"description":"如经年,如隔世,从何谈起!","author":"zhou xuan","url":"https://github.com"},"pages":[{"title":"关于","date":"2018-05-26T02:00:41.844Z","updated":"2018-05-26T02:00:41.844Z","comments":false,"path":"about/index.html","permalink":"https://github.com/about/index.html","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132&#123; name: &apos;cofess&apos; age: 22, gender: &apos;男&apos;, profession: &apos;Web Developer &amp; Internet&apos;, experience: &apos;2年&apos;, address: &apos;广东省深圳市&apos;, education: &apos;本科&apos;, github: &apos;https://github.com/zhouxuan001&apos;, blog: &apos;https://zhouxuan001.github.io&apos;, email: &apos;906085013@qq.com&apos;, description: &apos;致力于网站建设与前端用户体验设计&apos;, skills: [ [&apos;Html&apos;, &apos;Javascript&apos;, &apos;jQuery&apos;, &apos;CSS&apos;, &apos;ES6&apos;, &apos;Node&apos;], [&apos;Webpack&apos;, &apos;Gulp&apos;], [&apos;Less&apos;,&apos;Sass&apos;], [&apos;Git&apos;, &apos;SVN&apos;], [&apos;Vue&apos;], [&apos;Bootstrap&apos; , &apos;Angular&apos; ], [&apos;微信小程序&apos;] ], devTools: [ [&apos;Sublime Text&apos;, &apos;Hbuild&apos;, &apos;Notepad++&apos;, &apos;Eclipse&apos;], [&apos;Photoshop&apos;], [&apos;Chrome DevTools&apos;, &apos;IETester&apos;], [&apos;TortoiseSVN&apos;, &apos;TortoiseGit&apos;], [&apos;Beyond Compare&apos;, &apos;FlashFXP&apos;], [&apos;Navicat&apos;, &apos;Xftp&apos;] ] &#125;"},{"title":"404 Not Found：该页无法显示","date":"2018-05-24T09:45:29.453Z","updated":"2018-05-24T09:45:29.453Z","comments":false,"path":"/404.html","permalink":"https://github.com//404.html","excerpt":"","text":""},{"title":"分类","date":"2018-05-24T09:44:16.396Z","updated":"2018-05-24T09:44:16.396Z","comments":false,"path":"categories/index.html","permalink":"https://github.com/categories/index.html","excerpt":"","text":""},{"title":"书单","date":"2018-05-24T06:48:02.201Z","updated":"2018-05-24T06:48:02.201Z","comments":false,"path":"books/index.html","permalink":"https://github.com/books/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2018-05-24T06:48:42.984Z","updated":"2018-05-24T06:48:42.984Z","comments":true,"path":"links/index.html","permalink":"https://github.com/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2018-05-24T06:45:45.356Z","updated":"2018-05-24T06:45:45.356Z","comments":false,"path":"repository/index.html","permalink":"https://github.com/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2018-05-24T09:44:21.332Z","updated":"2018-05-24T09:44:21.332Z","comments":false,"path":"tags/index.html","permalink":"https://github.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"使用jQuery中hover事件时遇到的一个小问题","slug":"hover事件遇到的小问题","date":"2018-05-26T08:52:00.000Z","updated":"2018-05-26T09:30:16.981Z","comments":true,"path":"2018/05/26/hover事件遇到的小问题/","link":"","permalink":"https://github.com/2018/05/26/hover事件遇到的小问题/","excerpt":"","text":"在jQuery中有一个hover()方法，它可以实现模拟css中：hover这个伪类的效果。 css伪类写法如下： 12345&lt;style type=&quot;text/css&quot;&gt; a:hover&#123; color: #ccc; &#125; &lt;/style&gt; jQuery中hover()方法如下 ： 123456&lt;script type=&quot;text/javascript&quot;&gt; $(&quot;a&quot;).hover(function()&#123; $(this).css(&#123;&quot;color&quot;:&quot;#ccc&quot;&#125;); console.log(1); &#125;) &lt;/script&gt; 如上所示，两种方法都可以完美的实现我们想要的效果。 但是，在这其中其实还隐藏着一个很难发现的bug。 如上，在hover()这个函数中，我们写了一个function方法， 但是我们不知道的是，我们写在这个function中的代码其实一直都会被重复执行两次。 它在鼠标移入的时候执行了一次，移出的时候又会执行一次(通过控制台查看可以看到我们代码中的console.log(1)中的1总共被输出了两次)。 而我们的本意是只想让它在鼠标移入的时候执行我们的代码，这与我们想要的效果不一样，那么这到底是什么原因导致的呢？ 搜索官方jQuery文档中hover()方法的说明我们就会发现，其实这是jQuery中hover()内置方法的问题。 jQuery中的hover()方法中一共封装有两个function函数，第一个是在移入时执行， 第二个是在移出时执行的，而当我们像上面一样只写了一个function函数的时候， 它就会默认这个function函数就是我们想让它在移入和移出时都被执行的函数， 也就相当于将这个函数执行了两遍。 当然，这个bug对于执行一些普通的效果是没什么影响的。 但是，当触及到跟时间有关的一些动画效果（例如：jQuery中的animate()函数）的时候， 就会出现问题。如下： 123456&lt;script type=&quot;text/javascript&quot;&gt; $(&quot;.box&quot;).hover(function()&#123; var this_h=$(this).height()+50; $(this).animate(&#123;&quot;height&quot;:this_h+&quot;px&quot;&#125;,1000);//每次高度在上一次数值的基础上用动画形式增加50 &#125;) &lt;/script&gt; 在上面的代码中，我们想要实现的效果是，当鼠标移入到class为box的这个元素的时候，我们先获取它的高度， 再将这个高度数值增加50赋予一个变量this_h， 然后用jQuery内置的animate()动画方法使这个元素1000毫秒内高度在原先的基础上增加50px。 之后其它每次移入时都将box这个元素的高度在原先的基础上增加50，下次再移入，再增加50的高度。 但是实际执行效果却是：一开始移入时，增加了50的高度，然后移出的时候，又增加了50高度，之后再次移入移出又陆续增加了100的高度。 那这样的话明显不对啊，那么，怎么解决这个问题呢？ 很简单，我们在hover事件中写入两个function函数就好了，其中第一个是我们要让它在移入的时候执行的效果， 第二个是让它在移出的时候执行的效果。像我们上面这种情况的话就可以在第二个函数里面什么都不写就好了，如下： 12345678&lt;script type=&quot;text/javascript&quot;&gt; $(&quot;.box&quot;).hover(function()&#123; var this_h=$(this).height()+50; $(this).animate(&#123;&quot;height&quot;:this_h+&quot;px&quot;&#125;,1000);//每次高度在上一次数值的基础上用动画形式增加50 &#125;,function()&#123; //我是第二个函数，什么都不写的时候，在移出的时候hover方法什么都不会执行。 &#125;) &lt;/script&gt; 当然，像这些效果的话，其实也有很多别的方法可以完成的， 比如我们也可以使用jQuery中的一些其他鼠标事件（例如：onmouseover、onmouseout、onmouseenter、onmouseleave等）来实现， 没必要一味地使用hover()来进行事件的编写。 END","categories":[{"name":"jQuery","slug":"jQuery","permalink":"https://github.com/categories/jQuery/"}],"tags":[{"name":"前端开发","slug":"前端开发","permalink":"https://github.com/tags/前端开发/"}]},{"title":"HTML里的数据存储分析","slug":"浅析HTML数据存储","date":"2018-05-25T05:53:52.000Z","updated":"2018-05-26T08:29:25.287Z","comments":true,"path":"2018/05/25/浅析HTML数据存储/","link":"","permalink":"https://github.com/2018/05/25/浅析HTML数据存储/","excerpt":"","text":"在前端开发工作中，常用的数据存储有三种，分别是cookie，localStorage和sessionStorage。 其中，cookie是存储在浏览器的一段文本，而localStorage和sessionStorage则是HTML5中所提供的本地存储。 那么，这几种数据存储方式之间有什么区别呢？让我们来了解一下。 1.cookie cookie是什么?cookie就是一段文本，它存储在客户端（通常来说是浏览器），目前为各大主流浏览器存储数据所用。 一般来说用其存储的数据有比如：名字、密码、日期...等信息。cookie存储的数据能在客户端上保留相当长的时间。 分析：用cookie存储的数据有大小限制，一般不可超过4096 个字节(4kb)，而且cookie的安全系数不高，有被篡改的风险。 不过其好处是几乎支持所有浏览器。 2.localStorage 和 sessionStorage localStorage和sessionStorage是HTML5 提供的两种在客户端存储数据的新方法。 主要目的是为了克服由cookie所带来的一些限制，当数据需要被严格控制在客户端时，不需要持续的将数据发回服务器。 同时它们能够存储的数据大小一般都是：5MB，可以在不影响网站性能的前提下将大量数据存储于本地。 localStorage是本地存储，它的生命周期是永久的，关闭页面或浏览器之后localStorage中的数据也不会消失。除非主动删除数据，否则数据永远不会消失。 sessionStorage是会话存储，它是针对一个session(会话) 进行数据存储，它的生命周期仅在当前会话下有效。当用户关闭浏览器窗口后，数据将会被实时删除。 分析：localStorage和sessionStorage的存储空间更大； 数据不会传送到服务器，减少了客户端和服务器端的交互，节省了网络流量； 同时数据不发送到服务器端，不会担心数据被截获，安全性相对于cookie更高一些。 END","categories":[{"name":"JS","slug":"JS","permalink":"https://github.com/categories/JS/"}],"tags":[{"name":"前端开发","slug":"前端开发","permalink":"https://github.com/tags/前端开发/"}]},{"title":"JS监听中文输入","slug":"JS监听中文输入","date":"2018-05-25T03:28:47.000Z","updated":"2018-05-26T08:03:30.553Z","comments":true,"path":"2018/05/25/JS监听中文输入/","link":"","permalink":"https://github.com/2018/05/25/JS监听中文输入/","excerpt":"","text":"当时是在做 Wes Bos的 javascript30的一个 挑战。 在做第六个项目（根据输入框实时调用AJAX古诗匹配）时，当我们输入中文拼音，还在拼音字符状态未选择成中文时，一直在执行我编写的事件监听处理函数（当输入框里的值有变化时执行此函数， 调用AJAX在页面显示数据里包含这些字的古诗）。 而我想要的是在我们输入拼音未完成中文选择时，不让其执行我们的监听处理函数， 只有选择完中文后才去执行调用AJAX判断有没有包含输入的这些字的古诗。 古诗匹配项目效果图如下： 此问题解决方法如下： 1234567891011121314151617&lt;!--HTML代码片段--&gt;&lt;input type=&quot;text&quot; id=&quot;this_input&quot; placeholder=&quot;中文输入未完成时不执行事件&quot; /&gt; &lt;script src=&quot;http://code.jquery.com/jquery-1.8.3.min.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; $(&apos;#this_input&apos;).on(&apos;input propertychange&apos;, function () &#123;//input propertychange 当输入框里的值有变化时执行此函数 if ($(this).prop(&apos;cnStart&apos;)) return;//如果正在执行中文输入时，此值为true，执行return=&gt;下面代码不执行 console.log(&apos;当前输入：&apos; + $(this).val()); //此处执行AJAX请求判断请求的数据中有没有包含输入的这些字的古诗 //如果有，就将所有包含这些字的诗排列出来 &#125;).on(&apos;compositionstart&apos;, function () &#123;//compositionstart 当输入框有非直接的文字输入时触发(如：输入拼音在待选状态时) $(this).prop(&apos;cnStart&apos;, true); console.log(&apos;正在中文输入&apos;);//将 cnStart 变为 true，此处执行完后会跳到 &#125;).on(&apos;compositionend&apos;, function () &#123;//compositionend 当输入框有直接的文字输入时触发(如：输入拼音后完成了中文选择时) $(this).prop(&apos;cnStart&apos;, false); console.log(&apos;完成中文输入&apos;); &#125;); &lt;/script&gt; 当我们开始进行input的输入改变了input框里的值时，js会监听到input propertychange事件， 执行判断(一开始时$(this).prop('cnStart')的值我们没有定义，为undefined， 在监听了compositionstart和compositionend事件后会相应变为true和false，非true时不会进行return)， 再输出文本，接下来此时会执行此函数中其它的一些操作(AJAX请求...)。 而当我们输入框输入的文字还在待选状态时（如：输入拼音未选择完成时），便会触发compositionstart事件， 此时我们通过jquery的prop()方法给这个input元素添加自定义属性（cnStart：自定义名称，表示中文输入开始）和值（true），执行输出语句。 此时执行完compositionstart事件后，因为输入框内文字有发生变化，会再去调用上面的input propertychange事件=>进行判断， 此时$(this).prop('cnStart')的值为true，会执行return语句，因此便会截断下面的所有操作，使其不会去执行。 而当我们输入框输入的文字不在待选状态后（如：输入拼音后完成了中文选择时），便会触发compositionend事件， 此时我们再将cnStart这个自定义属性设置为false，代表我们已经完成了中文输入，执行输出语句。此时执行完了compositionend事件， 同上会再去调用input propertychange事件=>进行判断，此时$(this).prop('cnStart')的值为false， 不会执行return语句，那么接下来才会顺利执行我们此函数中的一系列操作。 END","categories":[{"name":"JS","slug":"JS","permalink":"https://github.com/categories/JS/"}],"tags":[{"name":"前端开发","slug":"前端开发","permalink":"https://github.com/tags/前端开发/"}]},{"title":"关于一些动态创建的节点无法绑定事件的问题","slug":"JS动态节点绑定","date":"2018-05-25T02:02:09.000Z","updated":"2018-05-26T08:03:28.296Z","comments":true,"path":"2018/05/25/JS动态节点绑定/","link":"","permalink":"https://github.com/2018/05/25/JS动态节点绑定/","excerpt":"","text":"在我们HTML页面中有时候一些DOM元素节点（例如：一些页面加载的新闻公告列表[如下图]）是需要通过AJAX请求接口数据动态创建的， 而当我们想在JS中想为这些节点绑定事件（如：click,hover...等）时便会出现无法绑定的情况，使用window.onload方法在页面加载后才执行也不行。 解决办法： 使用JQ提供的.on()和.delegate()方法可以解决解决此问题，给动态加载的元素成功绑定上事件，但是在这两种方法的参数中一定得写上我们需要绑定事件的那个元素选择器。 如:$(\"#parent\").on(\"click\",\".list\",function(){ }) 和 $(\"#parent\").delegate(\"click\",\".list\",function(){ }) 。 这两种方法内的参数 .list 就是我们动态加载出来需要绑定事件的那个元素，前面的 #parent 是 .list 元素的父元素。 1234567891011121314151617//javascript 代码//.list为新闻里的每一条公告，是我们动态创建的;#parent是一个包裹着里的这一行行公告的一个div。//一般来说，我们绑定事件的写法都是用下面的第一和第二种写法。但是这种写法是绑定不上的。$(&apos;#parent .list&apos;).click(function()&#123;//1.直接使用click(fn)方法绑定不上 console.log($(this).html());&#125;)$(&apos;#parent .list&apos;).on(&apos;click&apos;,function()&#123;//2.使用on(&quot;click&quot;,fn)方法还是绑定不上 console.log($(this).html());&#125;)$(&apos;#parent&apos;).on(&apos;click&apos;,&apos;.list&apos;,function()&#123;//3.此种写法可以成功绑定 //使用on(&quot;click&quot;,&quot;...&quot;,fn),在on里面增加一个参数（需要绑定的那个节点），同时前面调用.on方法的元素改为该节点的父元素即：$(&apos;#parent&apos;) console.log($(this).html());&#125;)$(&apos;#parent&apos;).delegate(&apos;click&apos;,&apos;.list&apos;,function()&#123;//4.此种写法可以成功绑定 //使用delegate(&quot;click&quot;,&quot;...&quot;,fn),在delegate里面增加一个参数（需要绑定的那个节点），同时前面调用.delegate方法的元素改为该节点的父元素即：$(&apos;#parent&apos;) console.log($(this).html());&#125;) END","categories":[{"name":"JS","slug":"JS","permalink":"https://github.com/categories/JS/"}],"tags":[{"name":"前端开发","slug":"前端开发","permalink":"https://github.com/tags/前端开发/"}]},{"title":"今天创建了个人博客","slug":"FirstNight","date":"2018-05-23T07:05:06.708Z","updated":"2018-05-25T03:19:11.589Z","comments":true,"path":"2018/05/23/FirstNight/","link":"","permalink":"https://github.com/2018/05/23/FirstNight/","excerpt":"","text":"今天根据网上教程创建了属于自己的个人博客，在这期间遇到了一些问题。 执行hexo -d命令时报错 出现类似以下的报错代码： 123warning: LF will be replaced by CRLF in 2015/12/05/hello-world/index.html.The file will have its original line endings in your working directory.... 此问题的解决方法是：修改根目录下的配置文件_config.yml，修改deploy节点。 原来的配置为： 1234deploy: type: git repo: https://github.com/&#123;myname&#125;/&#123;myname&#125;.github.io.git branch: master 将其修改成如下： 1234deploy: type: git repo: https://&#123;myname&#125;：&#123;mypassword&#125;@github.com/&#123;myname&#125;/&#123;myname&#125;.github.io.git branch: master 如此，便解决了执行hexo -d命令时报错的问题。 每次写完博客后需要执行 $ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 命令上传。 不要执行 hexo clean &amp;&amp; hexo g 会清除一些自己创建在 public 目录下的文件(自己添加的grace主题的about模块)。 每次修改和上传新博客时，执行 hexo d 命令就行了。 博客文件地址在 source/_posts/目录下。 网络博客主题模板： 更换模板方法(例：更换 grace 模板) 1$ git clone https://github.com/buhuo00/hexo-theme-grace themes/grace 再到_config.yml配置文件中修改模板参数theme为 theme： grace 待选模板 git clone https://github.com/beevesnoodles/hexo-theme-grace.git themes/grace 简洁型: https://github.com/buhuo00/hexo-theme-grace END","categories":[{"name":"配置介绍","slug":"配置介绍","permalink":"https://github.com/categories/配置介绍/"}],"tags":[{"name":"hexo配置","slug":"hexo配置","permalink":"https://github.com/tags/hexo配置/"}]}]}