{"meta":{"title":"周璇的个人博客","subtitle":null,"description":"在每个银河坠入山谷的梦里，我会醒来，也忘记梦境...","author":"zhou xuan","url":"https://zhouxuan001.github.io"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2019-07-25T09:37:08.374Z","updated":"2019-07-25T09:37:08.374Z","comments":false,"path":"/404.html","permalink":"https://zhouxuan001.github.io//404.html","excerpt":"","text":""},{"title":"关于","date":"2019-07-25T09:37:08.380Z","updated":"2019-07-25T09:37:08.380Z","comments":false,"path":"about/index.html","permalink":"https://zhouxuan001.github.io/about/index.html","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132&#123; name: &apos;cofess&apos; age: 22, gender: &apos;男&apos;, profession: &apos;Web Developer &amp; Internet&apos;, experience: &apos;2年&apos;, address: &apos;广东省深圳市&apos;, education: &apos;本科&apos;, github: &apos;https://github.com/zhouxuan001&apos;, blog: &apos;https://zhouxuan001.github.io&apos;, email: &apos;906085013@qq.com&apos;, description: &apos;致力于网站建设与前端用户体验设计&apos;, skills: [ [&apos;Html&apos;, &apos;Javascript&apos;, &apos;jQuery&apos;, &apos;CSS&apos;, &apos;ES6&apos;, &apos;Node&apos;], [&apos;Webpack&apos;, &apos;Gulp&apos;], [&apos;Less&apos;,&apos;Sass&apos;], [&apos;Git&apos;, &apos;SVN&apos;], [&apos;Vue&apos;], [&apos;Bootstrap&apos; , &apos;Angular&apos; ], [&apos;微信小程序&apos;] ], devTools: [ [&apos;Sublime Text&apos;, &apos;Hbuild&apos;, &apos;Notepad++&apos;, &apos;Eclipse&apos;], [&apos;Photoshop&apos;], [&apos;Chrome DevTools&apos;, &apos;IETester&apos;], [&apos;TortoiseSVN&apos;, &apos;TortoiseGit&apos;], [&apos;Beyond Compare&apos;, &apos;FlashFXP&apos;], [&apos;Navicat&apos;, &apos;Xftp&apos;] ] &#125;"},{"title":"Repositories","date":"2019-07-25T09:37:08.381Z","updated":"2019-07-25T09:37:08.381Z","comments":false,"path":"repository/index.html","permalink":"https://zhouxuan001.github.io/repository/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2019-07-25T09:37:08.381Z","updated":"2019-07-25T09:37:08.381Z","comments":true,"path":"links/index.html","permalink":"https://zhouxuan001.github.io/links/index.html","excerpt":"","text":""},{"title":"书单","date":"2019-07-25T09:37:08.380Z","updated":"2019-07-25T09:37:08.380Z","comments":false,"path":"books/index.html","permalink":"https://zhouxuan001.github.io/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2019-07-25T09:37:08.380Z","updated":"2019-07-25T09:37:08.380Z","comments":false,"path":"categories/index.html","permalink":"https://zhouxuan001.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-07-25T09:37:08.381Z","updated":"2019-07-25T09:37:08.381Z","comments":false,"path":"tags/index.html","permalink":"https://zhouxuan001.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"特效组件流程分析","slug":"特效组件流程分析","date":"2019-08-06T03:55:12.852Z","updated":"2019-08-08T02:04:20.328Z","comments":true,"path":"2019/08/06/特效组件流程分析/","link":"","permalink":"https://zhouxuan001.github.io/2019/08/06/特效组件流程分析/","excerpt":"","text":"特效组件流程分析 transition和animation的选择： 【1】两者的第一点区别，触发条件不同，transition通常和hover等事件配合使用，由事件触发，不立即执行。animation则和gif动态图差不多，立即播放。 animation不能用事件触发。（解决方法：通过点击以后添加类名，执行动画。比如动画时长1s，在点击函数中加动画类名，然后设置倒计时1s，1s动画执行完后再去除这个动画类名即可） 【2】两者第二点区别,transition无法重复执行动效。而animation可以设定循环次数。 【3】两者的第三点区别,animation与js的交互不是很紧密。 两者真正的区别是，animation写死了各个属性的变化值，使其不容易被js改写，但是可以在不同的动画类名之间选择(比如设置fade动画，需要对fade效果做改变，不太好进行。切换/skew)； 而transition的属性值则是可以发生改变。 【4】两者各自的优势 其实两者的区别都可以用一些方式去弥补，只是哪个更便利。 如果要灵活定制多个帧以及循环，用 animation. 如果要简单的from to 效果，用 transition. 如果要使用js灵活设定动画属性，用 transition. 12345678910&lt;script&gt; var fontStyle = document.createElement(&apos;style&apos;); fontStyle.appendChild(document.createTextNode(&quot;\\ @font-face &#123;\\ font-family: tencentFont;\\ src: url(&apos;https://node.video.qq.com/x/services/fontmin?font=tencent&amp;text=&quot; + encodeURIComponent( &apos;邀请成员与审批角色权限管理微信渠道接入网站人工服务设置在线客服操作指引会话查询机器新建知识库智能学习未知问题预小程序登录台云注册统计&apos; ) + &quot;&apos;);\\ &#125;\\ &quot;)); document.head.appendChild(fontStyle);&lt;/script&gt; 参考案例：单个特效组件fade如下 12345678910111213141516171819202122232425262728293031@mixin hardwareAccel() &#123; transform:perspective(1px) translateZ(0);&#125;@mixin improveAntiAlias() &#123; box-shadow: 0 0 1px rgba(0, 0, 0, 0);&#125;@mixin forceBlockLevel() &#123; display: inline-block; vertical-align: middle;&#125;@mixin hacks() &#123; @include forceBlockLevel(); @include hardwareAccel(); @include improveAntiAlias();&#125;@mixin fade &#123; @include hacks(); overflow: hidden; transition-duration: 0.3s; transition-property:color, background-color; &amp;:hover, &amp;:focus, &amp;:active &#123; background-color: $activeColor; color: white; &#125;&#125; SCSS插值语句 1234567891011121314151617181920212223语法：#&#123;&#125;//编译前$height:10px;$name:height;/* * @author:#&#123;$name&#125; */.div-#&#123;$name&#125;&#123; #&#123;$name&#125;: #&#123;$height&#125;;&#125;;//编译后/* * @author:height */.div-height &#123; height: 10px; &#125;实用例子：$nameSpace: &apos;hvr&apos; !default; END","categories":[{"name":"前端开发","slug":"前端开发","permalink":"https://zhouxuan001.github.io/categories/前端开发/"}],"tags":[{"name":"JS","slug":"JS","permalink":"https://zhouxuan001.github.io/tags/JS/"}]},{"title":"将做好的前端组件制作成npm包发布","slug":"将做好的前端组件制作成npm包发布","date":"2019-08-02T08:22:18.289Z","updated":"2019-08-12T07:59:47.822Z","comments":true,"path":"2019/08/02/将做好的前端组件制作成npm包发布/","link":"","permalink":"https://zhouxuan001.github.io/2019/08/02/将做好的前端组件制作成npm包发布/","excerpt":"","text":"将做好的前端组件制作成npm包发布 一、名字 animation-css 二、 期间发布npm包npm publish时遇到几个报错 1.报错code E403 1234npm ERR! code E403npm ERR! 403 Forbidden - PUT https://registry.npm.taobao.org/animation-css - [no_perms] Private mode enable, only admin can publish this modulenpm ERR! A complete log of this run can be found in:...... 这个问题是我们使用了淘宝镜像的问题，使用的是淘宝源cnpm,登陆到的是cnpm，我们把它切换成npm就好了。 1npm config set registry http://registry.npmjs.org/ 如果是这种报错： 123npm ERR! code E403npm ERR! 403 Forbidden - PUT http://registry.npmjs.org/animation-css - Package name too similar to existing packages...... 则表明是我们创建的这个npm包的名字跟官网上已有的包的名字太类似了，不被允许，所以我们需要给我们的npm包换一个名字。 起名字时到npm官网查下有没有名字已经被占用了，尽量给npm包起一个不会重复的名字，再次发布就可以了。 2.报错code E401 1234npm ERR! code E401npm ERR! 401 Unauthorized - PUT http://registry.npmjs.org/animation-css - You must be logged in to publish packages.npm ERR! A complete log of this run can be found in:...... 原因是Unauthorized未授权，我们登录一次就好了，执行 npm adduser，依次输入npm的账户密码还有Email。 输入成功登录之后，控制台会显示以下代码： 1Logged in as 你的Username on https://registry.npmjs.org/. 如果 on 后面不是 https://registry.npmjs.org/ ，而是其他的镜像，比如我们大家常见的淘宝镜像： 1Logged in as 你的Username on http://registry.npm.taobao.org/ 那么，切换成npm： 1npm config set registry https://registry.npmjs.org/ 然后再执行 npm adduser 登录账户 、 npm publish 发布就行了。 三、构架规划 ·使用git作代码版本管理 scss代码编译 使用weflow进行编译和压缩 npm安装指令 安装模块到项目目录下但不写入package.json； $ npm install xxx 安装到项目目录并写入package.json的&quot;dependencies&quot;中； $ npm install xxx –S 安装到项目目录并写入package.json的&quot;devDependencies&quot;中; $ npm install xxx –D 全局安装 $ npm install xxx -g 安装特定版本 $ npm install xxx@1.0.0 npm i --save-dev animation-library 解决npm 更新指定模块不生效的办法 根本原因是：package.json里的模块配置没被更改，所以npm update *** 更新指定模块命令不生效，这种情况需要手动更改package.json配置里模块的版本号 当然也可以执行以下指令安装： (1)安装&quot;npm-check-updates&quot;模块 $ npm install -g npm-check-updates (2)安装后，检查可更新的模块 $ ncu 或 $ npm-check-updates (3)更新package.json的依赖包到最新版本 $ ncu -u 12345678- 检查包是否已经过时 npm outdated - 更新node模块 npm update 模块名 npm update 模块名 @版本号 更新到指定版本 npm update 模块名 @latest - 卸载node模块 npm uninstall 模块名 SCSS插值语句 1234567891011121314151617181920212223语法：#&#123;&#125;//编译前$height:10px;$name:height;/* * @author:#&#123;$name&#125; */.div-#&#123;$name&#125;&#123; #&#123;$name&#125;: #&#123;$height&#125;;&#125;;//编译后/* * @author:height */.div-height &#123; height: 10px; &#125;实用例子：$nameSpace: &apos;hvr&apos; !default; sass命令行编译 进入scss目录再运行代码 sass --style animation-library.scss:…/css/animation-library.css 1.创建一个文件夹，名字随意 2.创建一个package.json文件，可以在创建的这个文件夹中用npm init来创建package.json文件 npm init需要输入一些项目配置，比如项目名字这些 3.创建index.js入口文件 -----创建初步完成 关联npm账户 在当前文件目录执行命令 npm login 登录完成后，可以执行 npm publish 发布到npm官网上。https://www.npmjs.com/ 查看自己发布的npm组件 END","categories":[{"name":"前端开发","slug":"前端开发","permalink":"https://zhouxuan001.github.io/categories/前端开发/"}],"tags":[{"name":"JS","slug":"JS","permalink":"https://zhouxuan001.github.io/tags/JS/"}]},{"title":"Ant Motion动效插件分析","slug":"分析AntMotion","date":"2019-08-01T02:38:17.958Z","updated":"2019-08-02T02:57:13.679Z","comments":true,"path":"2019/08/01/分析AntMotion/","link":"","permalink":"https://zhouxuan001.github.io/2019/08/01/分析AntMotion/","excerpt":"","text":"Ant Motion动效插件分析 一、原理分析 特效是通过组件内部的js和css两者共同控制。 通过调用封装的组件，部署组件DOM结构和其上面的参数完成动画效果的添加，同时用户可以更改组件的参数以及自定义组件的样式来实现所需要的展示效果。 使用起来比较方便，应用场景明确有针对性，但是工作量大，适合团队开发。 二、方案分析 （1）：第一种方案是可以尝试在110项目的基础上以类似Ant Motion的特效制作成组件，封装组件的dom节点和样式，以及添加一些组件的事件，初步可以添加一些类似弹窗特效，表格增删特效，按钮点击特效之类。 例：&lt;QueueAnim type={['right', 'left']} ease={['easeOutQuart', 'easeInOutQuart']}&gt;&lt;/QueueAnim&gt; （2）：第二种方案可以用只封装动画效果的方法制作动效组件库，纯css样式组件。通过给要加动效的元素添加指定的class类名来展示特效。比如hover添加了指定类名(如:hv-fadeIn)的元素时执行动效。 例：&lt;div class=&quot;hv-fadeIn&quot;&gt;&lt;/div&gt; （3）：第三种方案可以制作一个纯js组件，动效样式通过用户自定义。通过封装的方法给元素绑定特效，可以兼顾到hover和click两中交互效果，也可以只执行一次设定的动效。 例：go函数参数：绑定元素，触发方式option(hover/click)，动画效果(分为transition和animation两种)，动画时间，执行过渡的线性效果(支持cubic-bezier)，动效完成回调函数，延迟时间 go(dom元素,option,{ css属性：css值},transitionDuration(单位：毫秒),transitionTiming,transitionend回调函数,transitionDelay单位：毫秒); go(dom元素,option,keyframesName,animationDuration,animationTiming,animationend回调函数,animationDelay单位：毫秒); 三、主流动态分类 hover/点击特效：(hover类特效更适用于PC端，因为移动设备中并没有鼠标指针，移动端适合用点击类效果) （1）：元素的2D变换(放大缩小；扭动弹跳；晃动变形) （2）：元素背景的填充与文字颜色变化 （3）：icon图标变换 （4）：shadow阴影特效(元素升高地面出现阴影) （5）：按钮特效（button的点击交互；radio之类的单选复选框选中效果） （6）：弹出特效（select下拉框的拉开收起特效；dialog/modal弹框特效） 其它特效： （1）：出场特效（可以用于一些项目首页，滚动到对应楼层时添加出场动画，执行各种过渡组合特效） （2）：元素添加/删除特效(如：项目中一些表格列表和分支的创建和删除可以适用) END","categories":[{"name":"前端开发","slug":"前端开发","permalink":"https://zhouxuan001.github.io/categories/前端开发/"}],"tags":[{"name":"JS","slug":"JS","permalink":"https://zhouxuan001.github.io/tags/JS/"}]},{"title":"iconfont矢量图标旋转晃动","slug":"iconfont矢量图标旋转晃动","date":"2019-07-29T08:02:36.500Z","updated":"2019-08-02T08:07:49.200Z","comments":true,"path":"2019/07/29/iconfont矢量图标旋转晃动/","link":"","permalink":"https://zhouxuan001.github.io/2019/07/29/iconfont矢量图标旋转晃动/","excerpt":"","text":"标签：css3 前端 iconfont旋转 iconfont字体图标 旋转动画晃动 问题描述：项目中使用了iconfont字体图标做旋转动画，就是类似loading加载之类的动效，发现转动起来会出现晃动问题，仔细看会发现它并不是中心旋转(一开始没注意，放大看的时候才发现的)。 晃动情况如图一： 图一（晃动效果） 而我们想要的效果如图二： 图二（正确效果） 先上代码： 1234567891011121314151617181920212223242526272829303132333435&lt;!-- css样式如下(引入的stylesheet.css是从iconfont下载下来的矢量图标库样式文件) --&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;stylesheet.css&quot;&gt;&lt;style&gt; .iconfont &#123; font-family: &quot;iconfont&quot; !important; font-size: 16px; font-style: normal; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; &#125; .icon-181:before &#123; content: &quot;\\e631&quot;; &#125; .icon-181&#123; position: absolute; top: 27px; left: 22px; font-size: 20px; line-height: 1; color: #275CF0; animation: loading-spin 1s linear infinite; &#125; @keyframes loading-spin &#123; 0% &#123; -webkit-transform: rotate(0deg); transform: rotate(0deg); &#125; to &#123; -webkit-transform: rotate(1turn); transform: rotate(1turn); &#125; &#125;&lt;/style&gt;&lt;!-- html结构如下 --&gt;&lt;i class=&quot;iconfont icon-181&quot;&gt;&lt;/i&gt; 多番尝试一直没能解决晃动问题，很蓝瘦。。。 一直安利的百度大法也没能帮我解决，后琢磨了很久才找到解决办法。 有感爬坑不易，特此发文分享给各位大佬。 那么，废话不多说，下面分享一下我解决这个问题的过程吧： 1.初步尝试 首先我参考百度上的一些说法尝试了设置旋转中心点(transform-origin)、设置定位(position)、浮动(float)、以及使用translateZ(0)进行旋转渲染。 结果发现并没有什么效果。 然后转而又测试使用从iconfont图标库下载下来的png图片(项目中使用的这个矢量图标的原版图片)来做animation旋转动效，发现旋转起来是没有出现晃动问题的。 这个svg图像做成图片不会出现晃动，那么问题到底出在哪里呢？让我们继续探索。 (PS:页面中使用的图标是将svg图像传到iconfont网站处理以后，然后导出为字体矢量图标引用到页面中。) 2.问题探索 经我打开控制台仔细查看发现，我给这个icon-181元素 (即这个字体矢量图标的父元素)设置的font-size是20px，可是显示的字体矢量图标元素大小却是20*21。 按说应该是20*20的，这个矢量图标却莫名的多出了1px的像素高度。 觉得可能是这个问题导致的旋转晃动，这种情况有可能是它做成iconfont字体矢量图标运用后出现的。 详情见下面的两张属性图：矢量图标的父元素属性图(图三) 和 矢量图标在页面中的属性图(图四) 图三（矢量图标父元素属性图） 图四（矢量图标属性图） (PS:并不一定只是在font-size为20px时会出现这种问题，大家可以自行调整font-size的大小测试会出现问题的font-size值为多少， 调整font-size直到出现元素大小与设置的font-size尺寸不一致的情况时。比如：设置到font-size为22px时， before添加的元素大小变成了22*23,而并不是标准的22*22时，给它添加旋转动画，也会出现晃动问题。) 期间，我试探出了一个能勉强解决的办法。 我在控制台调整矢量图标的父元素icon-181的字体大小font-size一直增加到24px后，发现里面通过before添加的这个矢量图标元素大小也显示为24*24了， 旋转起来也没有再出现晃动现象，可以解决这个问题。 但是我这个项目明确要求的是20px的图标，所以这个方案也只能舍弃。 那么，到底是什么原因导致它会多出1px渲染呢？是不是我使用的这个svg图像有问题，导致了它转换成字体矢量图标以后出现了这样的情况？继续开始测试： &gt; part-1(怀疑是图像尺寸导致的矢量图标渲染出现拉伸) 让设计师发了几个尺寸不一的loading图素材进行测试，分别是10*10 20*20 30*30 40*40尺寸的svg图标， 将其导入到iconfont网站再下载下来做成字体样式，想看看是否是图标尺寸导致的问题。经测试无效，阵亡。。。 &gt; part-2(怀疑是这个图像的圆不够标准) 尝试用iconfont图标库上其它的一些loading圆环图标，包括一些官方图标进行测试。测试结果是一样的晃~。over,就这个fell！倍儿爽！ &gt; part-3(觉得是阿里iconfont图标库的通病，改用别的图标库) 后面在网上看到有人说可能是阿里图标不稳定，没有做高度固定，然后我找了一款国外icon制作网站，叫做 icomoon 。 将使用的这个图标的SVG图像导入这个网站生成了一遍，把从这个网站下载下来的字体样式加载到我这里使用。 引入字体样式进来以后，查看矢量图标元素大小。没问题，是标准的20*20了(我们设置的font-size为20px,所以元素的大小应该是20*20)，很开心。 然后，给它启用旋转动画跑起来，跑的是挺欢的，但是，它又飘了~(好吧，又是一次失败的尝试)。 那么，看一下是怎么导致的吧。 调整font-size从20px一直到24px，期间元素大小没什么问题，直到24px的时候，发现里面的图标元素大小变为了24*25，也出现了这种多出1px的高度的问题。 https://www.npmjs.com/settings/064ybhsi/password END","categories":[{"name":"前端开发","slug":"前端开发","permalink":"https://zhouxuan001.github.io/categories/前端开发/"}],"tags":[]},{"title":"今天创建了个人博客","slug":"今天创建了个人博客","date":"2019-07-25T09:37:08.379Z","updated":"2019-11-21T07:49:08.040Z","comments":true,"path":"2019/07/25/今天创建了个人博客/","link":"","permalink":"https://zhouxuan001.github.io/2019/07/25/今天创建了个人博客/","excerpt":"","text":"今天根据网上教程创建了属于自己的个人博客。 参考博客主题：https://blog.cofess.com/ 执行hexo -d命令时报错 出现类似以下的报错代码： 123warning: LF will be replaced by CRLF in 2015/12/05/hello-world/index.html.The file will have its original line endings in your working directory.... 此问题的解决方法是：修改根目录下的配置文件_config.yml，修改deploy节点。原因是没有配置正确的git仓库地址。 原来的配置为： 1234deploy: type: git repo: https://github.com/&#123;myname&#125;/&#123;myname&#125;.github.io.git branch: master 将其修改成如下： 1234deploy: type: git repo: https://&#123;myname&#125;：&#123;mypassword&#125;@github.com/&#123;myname&#125;/&#123;myname&#125;.github.io.git branch: master 如此，便解决了执行hexo -d命令时报错的问题。 从博客仓库地址 克隆项目文件(前提是已经搭建好自己的博客仓库了，把下面的 zhouxuan001 换成你自己的博客账号名) 1git clone git@github.com:zhouxuan001/zhouxuan001.github.io.git 克隆完分别执行以下代码安装npm依赖以及hexo部署发布插件 12$ npm install$ npm install hexo-deployer-git 在我们的博客文件仓库里有master分支和hexo分支，分别保存静态网页和源文件。 博客有进行修改变动以后： 执行git add . 、git commit -m “” 、 git push origin hexo来提交hexo网站源文件以供备份 依次执行 hexo clean &amp;&amp; hexo g &amp;&amp; hexo d生成静态网页部署至Github上 每次写完博客后需要执行 $ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 命令上传静态网页变更到我们的Github上,这样我们的博客网站才能看得到我们最新的提交。 使用hexo的一些指令 1234567891011121314151617181920## 基本指令(将博客变更更新到个人github网站上)hexo s == hexo server #启动本地服务器预览hexo clean #清除缓存 ,网页正常情况下可以忽略此条命令,执行该指令后,会删掉站点根目录下的public文件夹,通过hexo g重新生成hexo g == hexo generate #生成静态网页(执行$ hexo g后会在站点根目录下生成public文件夹,hexo会将source目录下面的.md后缀的文件编译为.html后缀的文件,存放在/blog/public/路径下)hexo d #将本地数据部署到远端服务器(如github)## 提交整个网站源文件(将整个博客文件上传到git的网站源文件hexo分支上)git add . #添加修改代码到缓存（注意最后的\".\"前面有个空格git commit -m \"xxx\" #添加提交代码的备注（xxx为本次提交代码的备注）git push origin hexo / master #提交代码到指定分支（hexo为要提交代码的分支名称）## 其余指令：git branch #查看当前所属分支 master/hexogit branch -a #查看所有分支git checkout hexo #切换到某一分支(hexo填写要切换的分支名称）git remote -v # 查看当前的传输协议# =&gt; origin https://github.com/USERNAME/REPOSITORY.git (fetch)# =&gt; origin https://github.com/USERNAME/REPOSITORY.git (push)git remote set-url origin git@github.com:zhouxuan001/zhouxuan001.github.io.git # 修改 https 协议为 ssh 协议 如果出现 git push 报错如下： 1remote: Invalid username or password. fatal: Authentication failed for ... 这个情况一般是用户名和用户密码验证出错，我们查看一下目前使用的传输协议。 1$ git remote -v 如果显示不是使用https协议的话，我们可以修改传输协议，将我们github的用户名和密码配置进去，这样传输的时候便不会出错，也免去了每次传输都要输入密码的繁琐过程了。 查看github上项目的地址，点击当前项目右上角的Clone or download按钮，选择使用HTTPS协议，比如我的是 https://github.com/zhouxuan001/zhouxuan001.github.io.git。 在 github.com之前拼接我们的用户名username和密码password，如: username:password@ 拼接好以后使用以下命令，其中的 username 和 password 还有后面的博客地址中的zhouxuan001自己替换即可: 1$ git remote set-url origin https://username:password@github.com/zhouxuan001/zhouxuan001.github.io.git/ 再执行 git push 命令，大功告成！ 博客文件地址在 source/_posts/目录下。 网络博客主题模板： 更换模板方法(例：更换 grace 模板) 1$ git clone https://github.com/buhuo00/hexo-theme-grace themes/grace 再到根目录_config.yml配置文件中修改模板参数theme为 theme： grace 想要修改当前主题博客设置 请到到目录themes/pure/_config.yml文件中查看修改。(注:pure目录为自己当前的主题目录) 想要了解当前主题配置信息 请到themes/pure/README.cn.md文件中查看详细主题设置说明。(注:pure目录为自己当前的主题目录) END 我的博客即将同步至腾讯云+社区，邀请大家一同入驻：https://cloud.tencent.com/developer/support-plan?invite_code=2281lbmp0tq88","categories":[],"tags":[]},{"title":"响应式开发(01)","slug":"响应式开发(01)","date":"2018-06-22T06:47:00.000Z","updated":"2019-07-30T08:26:29.738Z","comments":true,"path":"2018/06/22/响应式开发(01)/","link":"","permalink":"https://zhouxuan001.github.io/2018/06/22/响应式开发(01)/","excerpt":"","text":"响应式开发中获取用户设备信息的方法 var u = navigator.userAgent; 判断是否是Android设备 123if (u.indexOf(&quot;Android&quot;)&gt;-1||u.indexOf(&quot;Adr&quot;)&gt;-1) &#123; console.log(&quot;Android设备&quot;);&#125; 判断是否是iPhone设备 123if (u.indexOf(&quot;iPhone&quot;)&gt;-1) &#123; console.log(&quot;iPhone设备&quot;);&#125; 判断是否是iPad设备 123if (u.indexOf(&quot;iPad&quot;)&gt;-1) &#123; console.log(&quot;iPad设备&quot;);&#125; 剩下的就是PC设备了 123else&#123; console.log(&quot;PC设备&quot;);&#125; 1111 END","categories":[{"name":"前端开发","slug":"前端开发","permalink":"https://zhouxuan001.github.io/categories/前端开发/"}],"tags":[{"name":"响应式开发","slug":"响应式开发","permalink":"https://zhouxuan001.github.io/tags/响应式开发/"}]},{"title":"每日小记(01)","slug":"每日小记(01)","date":"2018-06-21T06:40:00.000Z","updated":"2019-07-26T06:15:39.629Z","comments":true,"path":"2018/06/21/每日小记(01)/","link":"","permalink":"https://zhouxuan001.github.io/2018/06/21/每日小记(01)/","excerpt":"","text":"开发一个转盘游戏时遇到的多终端兼容问题 我前端这边写了一个预加载执行函数,就是需要在页面加载完成之后执行这个里面的一系列操作,我在里面执行的是一个调用后端接口的函数,我需要调用这个接口来渲染页面数据。 但是在ios端运行时,执行调用后端接口时返回的状态一直是error,在安卓那边运行没有一点毛病。 实在理解不了,也想不出来是什么导致的。 后面觉得可能是ios中数据加载得比较慢的原因,于是使用一个倒计时来延时执行我们需要在页面完成之后再调用后端接口的函数,于是成功解决了这个问题。 其他问题 安卓端那边调用执行调用后端接口后,也出现过接口状态一直是error的情况。 原因是安卓APP端不支持ajax跨域请求,解决方法是让安卓那边加上支持跨域访问的代码。 END","categories":[{"name":"每日小记","slug":"每日小记","permalink":"https://zhouxuan001.github.io/categories/每日小记/"}],"tags":[{"name":"日常积累","slug":"日常积累","permalink":"https://zhouxuan001.github.io/tags/日常积累/"}]},{"title":"手把手教你搭建博客","slug":"手把手教你搭建博客","date":"2018-06-05T03:25:00.000Z","updated":"2019-07-25T09:37:08.379Z","comments":true,"path":"2018/06/05/手把手教你搭建博客/","link":"","permalink":"https://zhouxuan001.github.io/2018/06/05/手把手教你搭建博客/","excerpt":"","text":"前言：我今天新创建了属于自己的博客，还是很简单的，接下来让我来教大家怎么搭建博客吧！ END","categories":[{"name":"分享教程","slug":"分享教程","permalink":"https://zhouxuan001.github.io/categories/分享教程/"}],"tags":[{"name":"博客搭建","slug":"博客搭建","permalink":"https://zhouxuan001.github.io/tags/博客搭建/"}]},{"title":"微信小程序学习(01)","slug":"微信小程序学习计划-01","date":"2018-06-04T07:00:00.000Z","updated":"2019-07-25T09:37:08.379Z","comments":true,"path":"2018/06/04/微信小程序学习计划-01/","link":"","permalink":"https://zhouxuan001.github.io/2018/06/04/微信小程序学习计划-01/","excerpt":"","text":"待编辑 END","categories":[{"name":"学习计划","slug":"学习计划","permalink":"https://zhouxuan001.github.io/categories/学习计划/"}],"tags":[{"name":"微信小程序了解一哈","slug":"微信小程序了解一哈","permalink":"https://zhouxuan001.github.io/tags/微信小程序了解一哈/"}]},{"title":"CSS完成元素水平垂直居中","slug":"CSS水平垂直居中","date":"2018-05-31T07:39:00.000Z","updated":"2019-07-29T08:13:55.343Z","comments":true,"path":"2018/05/31/CSS水平垂直居中/","link":"","permalink":"https://zhouxuan001.github.io/2018/05/31/CSS水平垂直居中/","excerpt":"","text":"要求：子元素和父元素宽高不确定，需要设置子元素水平垂直居中，效果如下图： 这里提供几种简单的实现方法： 1.使用margin:auto属性实现【兼容IE7以上大部分浏览器】 首先这个元素和它的父元素都要设置定位，其中这个要水平垂直居中的元素需设置绝对定位absolute， 然后再给它设置样式{left: 0;right: 0;top: 0;bottom: 0;margin:auto;}。这样便可以实现元素在父容器里垂直居中显示了。 1234567891011121314151617181920&lt;style type=&quot;text/css&quot;&gt;.parent&#123; /*子元素和父元素宽高随意，都可以实现水平垂直居中，这里随便设置了一个宽高撑开盒子容器体积，方便查看效果*/ width: 600px; height: 500px; background: #222222; position: relative;&#125;.child&#123; width: 150px; height: 200px; background: goldenrod; position: absolute; left: 0; right: 0; top: 0; bottom: 0; margin: auto;&#125;&lt;/style&gt; 2.使用transform属性实现【浏览器兼容性：Safari 3.1+、 Chrome 8+、Firefox 4+、Opera 10+、IE10+】 同上，设置好定位。然后添加样式{left: 50%;top: 50%;transform: translateX(-50%) translateY(-50%);}便好了。 其中的translateX(-50%)表示将此元素在X轴上向左移50%元素宽度的距离，同理translateY(-50%)将元素在Y轴上向上移50%元素高度的距离。 123456789101112131415161718&lt;style type=&quot;text/css&quot;&gt;.parent&#123; /*子元素和父元素宽高随意，都可以实现水平垂直居中，这里随便设置了一个宽高撑开盒子容器体积，方便查看效果*/ width: 600px; height: 500px; background: #222222; position: relative;&#125;.child&#123; width: 150px; height: 200px; background: goldenrod; position: absolute; left: 50%; top: 50%; transform: translateX(-50%) translateY(-50%);&#125;&lt;/style&gt; 3.使用flex布局实现【浏览器兼容性：Safari 9+、 Chrome 29+、Firefox 28+、Opera 17+、IE10+】 首先给父元素设置flex布局{display: flex;}，然后父元素再设置align-items: center; 可以使其包裹的子元素在水平方向上水平居中排列， 再就是{justify-content: center;}属性规定了子元素在Y轴垂直方向上是居中排列。这样便实现了使用flex完成水平垂直居中的布局。 12345678910111213141516&lt;style type=&quot;text/css&quot;&gt;.parent&#123; /*子元素和父元素宽高随意，都可以实现水平垂直居中，这里随便设置了一个宽高撑开盒子容器体积，方便查看效果*/ width: 600px; height: 500px; background: #222222; display: flex; align-items: center; justify-content: center;&#125;.child&#123; width: 150px; height: 200px; background: goldenrod;&#125;&lt;/style&gt; END","categories":[{"name":"前端开发","slug":"前端开发","permalink":"https://zhouxuan001.github.io/categories/前端开发/"}],"tags":[{"name":"css","slug":"css","permalink":"https://zhouxuan001.github.io/tags/css/"}]},{"title":"使用jQuery中hover事件时遇到的一个小问题","slug":"hover事件遇到的小问题","date":"2018-05-26T08:52:00.000Z","updated":"2019-07-25T09:37:08.378Z","comments":true,"path":"2018/05/26/hover事件遇到的小问题/","link":"","permalink":"https://zhouxuan001.github.io/2018/05/26/hover事件遇到的小问题/","excerpt":"","text":"在jQuery中有一个hover()方法，它可以实现模拟css中：hover这个伪类的效果。 css伪类写法如下： 12345&lt;style type=&quot;text/css&quot;&gt; a:hover&#123; color: #ccc; &#125; &lt;/style&gt; jQuery中hover()方法如下 ： 123456&lt;script type=&quot;text/javascript&quot;&gt; $(&quot;a&quot;).hover(function()&#123; $(this).css(&#123;&quot;color&quot;:&quot;#ccc&quot;&#125;); console.log(1); &#125;) &lt;/script&gt; 如上所示，两种方法都可以完美的实现我们想要的效果。 但是，在这其中其实还隐藏着一个很难发现的bug。 如上，在hover()这个函数中，我们写了一个function方法， 但是我们不知道的是，我们写在这个function中的代码其实一直都会被重复执行两次。 它在鼠标移入的时候执行了一次，移出的时候又会执行一次(通过控制台查看可以看到我们代码中的console.log(1)中的1总共被输出了两次)。 而我们的本意是只想让它在鼠标移入的时候执行我们的代码，这与我们想要的效果不一样，那么这到底是什么原因导致的呢？ 搜索官方jQuery文档中hover()方法的说明我们就会发现，其实这是jQuery中hover()内置方法的问题。 jQuery中的hover()方法中一共封装有两个function函数，第一个是在移入时执行， 第二个是在移出时执行的，而当我们像上面一样只写了一个function函数的时候， 它就会默认这个function函数就是我们想让它在移入和移出时都被执行的函数， 也就相当于将这个函数执行了两遍。 当然，这个bug对于执行一些普通的效果是没什么影响的。 但是，当触及到跟时间有关的一些动画效果（例如：jQuery中的animate()函数）的时候， 就会出现问题。如下： 123456&lt;script type=&quot;text/javascript&quot;&gt; $(&quot;.box&quot;).hover(function()&#123; var this_h=$(this).height()+50; $(this).animate(&#123;&quot;height&quot;:this_h+&quot;px&quot;&#125;,1000);//每次高度在上一次数值的基础上用动画形式增加50 &#125;) &lt;/script&gt; 在上面的代码中，我们想要实现的效果是，当鼠标移入到class为box的这个元素的时候，我们先获取它的高度， 再将这个高度数值增加50赋予一个变量this_h， 然后用jQuery内置的animate()动画方法使这个元素1000毫秒内高度在原先的基础上增加50px。 之后其它每次移入时都将box这个元素的高度在原先的基础上增加50，下次再移入，再增加50的高度。 但是实际执行效果却是：一开始移入时，增加了50的高度，然后移出的时候，又增加了50高度，之后再次移入移出又陆续增加了100的高度。 那这样的话明显不对啊，那么，怎么解决这个问题呢？ 很简单，我们在hover事件中写入两个function函数就好了，其中第一个是我们要让它在移入的时候执行的效果， 第二个是让它在移出的时候执行的效果。像我们上面这种情况的话就可以在第二个函数里面什么都不写就好了，如下： 12345678&lt;script type=&quot;text/javascript&quot;&gt; $(&quot;.box&quot;).hover(function()&#123; var this_h=$(this).height()+50; $(this).animate(&#123;&quot;height&quot;:this_h+&quot;px&quot;&#125;,1000);//每次高度在上一次数值的基础上用动画形式增加50 &#125;,function()&#123; //我是第二个函数，什么都不写的时候，在移出的时候hover方法什么都不会执行。 &#125;) &lt;/script&gt; 当然，像这些效果的话，其实也有很多别的方法可以完成的， 比如我们也可以使用jQuery中的一些其他鼠标事件（例如：onmouseover、onmouseout、onmouseenter、onmouseleave等）来实现， 没必要一味地使用hover()来进行事件的编写。 END","categories":[{"name":"前端开发","slug":"前端开发","permalink":"https://zhouxuan001.github.io/categories/前端开发/"}],"tags":[{"name":"jQuery","slug":"jQuery","permalink":"https://zhouxuan001.github.io/tags/jQuery/"}]},{"title":"HTML里的数据存储分析","slug":"浅析HTML数据存储","date":"2018-05-25T05:53:52.000Z","updated":"2019-07-29T08:14:29.987Z","comments":true,"path":"2018/05/25/浅析HTML数据存储/","link":"","permalink":"https://zhouxuan001.github.io/2018/05/25/浅析HTML数据存储/","excerpt":"","text":"在前端开发工作中，常用的数据存储有三种，分别是cookie，localStorage和sessionStorage。 其中，cookie是存储在浏览器的一段文本，而localStorage和sessionStorage则是HTML5中所提供的本地存储。 那么，这几种数据存储方式之间有什么区别呢？让我们来了解一下。 1.cookie cookie是什么?cookie就是一段文本，它存储在客户端（通常来说是浏览器），目前为各大主流浏览器存储数据所用。 一般来说用其存储的数据有比如：名字、密码、日期...等信息。cookie存储的数据能在客户端上保留相当长的时间。 分析：用cookie存储的数据有大小限制，一般不可超过4096 个字节(4kb)，而且cookie的安全系数不高，有被篡改的风险。 不过其好处是几乎支持所有浏览器。 2.localStorage 和 sessionStorage localStorage和sessionStorage是HTML5 提供的两种在客户端存储数据的新方法。 主要目的是为了克服由cookie所带来的一些限制，当数据需要被严格控制在客户端时，不需要持续的将数据发回服务器。 同时它们能够存储的数据大小一般都是：5MB，可以在不影响网站性能的前提下将大量数据存储于本地。 localStorage是本地存储，它的生命周期是永久的，关闭页面或浏览器之后localStorage中的数据也不会消失。除非主动删除数据，否则数据永远不会消失。 sessionStorage是会话存储，它是针对一个session(会话) 进行数据存储，它的生命周期仅在当前会话下有效。当用户关闭浏览器窗口后，数据将会被实时删除。 分析：localStorage和sessionStorage的存储空间更大； 数据不会传送到服务器，减少了客户端和服务器端的交互，节省了网络流量； 同时数据不发送到服务器端，不会担心数据被截获，安全性相对于cookie更高一些。 END","categories":[{"name":"前端开发","slug":"前端开发","permalink":"https://zhouxuan001.github.io/categories/前端开发/"}],"tags":[{"name":"JS","slug":"JS","permalink":"https://zhouxuan001.github.io/tags/JS/"}]},{"title":"JS监听中文输入","slug":"JS监听中文输入","date":"2018-05-25T03:28:47.000Z","updated":"2019-07-25T09:37:08.378Z","comments":true,"path":"2018/05/25/JS监听中文输入/","link":"","permalink":"https://zhouxuan001.github.io/2018/05/25/JS监听中文输入/","excerpt":"","text":"当时是在做 Wes Bos的 javascript30的一个 挑战。 在做第六个项目（根据输入框实时调用AJAX古诗匹配）时，当我们输入中文拼音，还在拼音字符状态未选择成中文时，一直在执行我编写的事件监听处理函数（当输入框里的值有变化时执行此函数， 调用AJAX在页面显示数据里包含这些字的古诗）。 而我想要的是在我们输入拼音未完成中文选择时，不让其执行我们的监听处理函数， 只有选择完中文后才去执行调用AJAX判断有没有包含输入的这些字的古诗。 古诗匹配项目效果图如下： 此问题解决方法如下： 1234567891011121314151617&lt;!--HTML代码片段--&gt;&lt;input type=&quot;text&quot; id=&quot;this_input&quot; placeholder=&quot;中文输入未完成时不执行事件&quot; /&gt; &lt;script src=&quot;http://code.jquery.com/jquery-1.8.3.min.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; $(&apos;#this_input&apos;).on(&apos;input propertychange&apos;, function () &#123;//input propertychange 当输入框里的值有变化时执行此函数 if ($(this).prop(&apos;cnStart&apos;)) return;//如果正在执行中文输入时，此值为true，执行return=&gt;下面代码不执行 console.log(&apos;当前输入：&apos; + $(this).val()); //此处执行AJAX请求判断请求的数据中有没有包含输入的这些字的古诗 //如果有，就将所有包含这些字的诗排列出来 &#125;).on(&apos;compositionstart&apos;, function () &#123;//compositionstart 当输入框有非直接的文字输入时触发(如：输入拼音在待选状态时) $(this).prop(&apos;cnStart&apos;, true); console.log(&apos;正在中文输入&apos;);//将 cnStart 变为 true，此处执行完后会跳到 &#125;).on(&apos;compositionend&apos;, function () &#123;//compositionend 当输入框有直接的文字输入时触发(如：输入拼音后完成了中文选择时) $(this).prop(&apos;cnStart&apos;, false); console.log(&apos;完成中文输入&apos;); &#125;); &lt;/script&gt; 当我们开始进行input的输入改变了input框里的值时，js会监听到input propertychange事件， 执行判断(一开始时$(this).prop('cnStart')的值我们没有定义，为undefined， 在监听了compositionstart和compositionend事件后会相应变为true和false，非true时不会进行return)， 再输出文本，接下来此时会执行此函数中其它的一些操作(AJAX请求...)。 而当我们输入框输入的文字还在待选状态时（如：输入拼音未选择完成时），便会触发compositionstart事件， 此时我们通过jquery的prop()方法给这个input元素添加自定义属性（cnStart：自定义名称，表示中文输入开始）和值（true），执行输出语句。 此时执行完compositionstart事件后，因为输入框内文字有发生变化，会再去调用上面的input propertychange事件=>进行判断， 此时$(this).prop('cnStart')的值为true，会执行return语句，因此便会截断下面的所有操作，使其不会去执行。 而当我们输入框输入的文字不在待选状态后（如：输入拼音后完成了中文选择时），便会触发compositionend事件， 此时我们再将cnStart这个自定义属性设置为false，代表我们已经完成了中文输入，执行输出语句。此时执行完了compositionend事件， 同上会再去调用input propertychange事件=>进行判断，此时$(this).prop('cnStart')的值为false， 不会执行return语句，那么接下来才会顺利执行我们此函数中的一系列操作。 END","categories":[{"name":"前端开发","slug":"前端开发","permalink":"https://zhouxuan001.github.io/categories/前端开发/"}],"tags":[{"name":"JS","slug":"JS","permalink":"https://zhouxuan001.github.io/tags/JS/"}]},{"title":"关于一些动态创建的节点无法绑定事件的问题","slug":"JS动态节点绑定","date":"2018-05-25T02:02:09.000Z","updated":"2019-07-25T09:37:08.376Z","comments":true,"path":"2018/05/25/JS动态节点绑定/","link":"","permalink":"https://zhouxuan001.github.io/2018/05/25/JS动态节点绑定/","excerpt":"","text":"在我们HTML页面中有时候一些DOM元素节点（例如：一些页面加载的新闻公告列表[如下图]）是需要通过AJAX请求接口数据动态创建的， 而当我们想在JS中想为这些节点绑定事件（如：click,hover...等）时便会出现无法绑定的情况，使用window.onload方法在页面加载后才执行也不行。 解决办法： 使用JQ提供的.on()和.delegate()方法可以解决解决此问题，给动态加载的元素成功绑定上事件，但是在这两种方法的参数中一定得写上我们需要绑定事件的那个元素选择器。 如:$(\"#parent\").on(\"click\",\".list\",function(){ }) 和 $(\"#parent\").delegate(\"click\",\".list\",function(){ }) 。 这两种方法内的参数 .list 就是我们动态加载出来需要绑定事件的那个元素，前面的 #parent 是 .list 元素的父元素。 1234567891011121314151617//javascript 代码//.list为新闻里的每一条公告，是我们动态创建的;#parent是一个包裹着里的这一行行公告的一个div。//一般来说，我们绑定事件的写法都是用下面的第一和第二种写法。但是这种写法是绑定不上的。$(&apos;#parent .list&apos;).click(function()&#123;//1.直接使用click(fn)方法绑定不上 console.log($(this).html());&#125;)$(&apos;#parent .list&apos;).on(&apos;click&apos;,function()&#123;//2.使用on(&quot;click&quot;,fn)方法还是绑定不上 console.log($(this).html());&#125;)$(&apos;#parent&apos;).on(&apos;click&apos;,&apos;.list&apos;,function()&#123;//3.此种写法可以成功绑定 //使用on(&quot;click&quot;,&quot;...&quot;,fn),在on里面增加一个参数（需要绑定的那个节点），同时前面调用.on方法的元素改为该节点的父元素即：$(&apos;#parent&apos;) console.log($(this).html());&#125;)$(&apos;#parent&apos;).delegate(&apos;click&apos;,&apos;.list&apos;,function()&#123;//4.此种写法可以成功绑定 //使用delegate(&quot;click&quot;,&quot;...&quot;,fn),在delegate里面增加一个参数（需要绑定的那个节点），同时前面调用.delegate方法的元素改为该节点的父元素即：$(&apos;#parent&apos;) console.log($(this).html());&#125;) END","categories":[{"name":"前端开发","slug":"前端开发","permalink":"https://zhouxuan001.github.io/categories/前端开发/"}],"tags":[{"name":"JS","slug":"JS","permalink":"https://zhouxuan001.github.io/tags/JS/"}]}]}